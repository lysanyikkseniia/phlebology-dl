"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:06.001Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"from numpy  import*\\nimport matplotlib.pyplot as plt\\nimport matplotlib.font_manager as fm,os\\nimport matplotlib.patches as mpatches\\nimport matplotlib.lines as mlines\\nfrom scipy.integrate import odeint\\nfrom scipy import linalg\\nimport time\\nfrom numpy.linalg import det, inv, svd, norm\\nimport numpy as np\\n\\ndef Runge_Kutta(to, tEnd, yo, tau, f, p):\\n          def increment(f, t, y, tau, p):\\n                    k1=tau*f(t,y, p)\\n                    k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\\n                    k3 =tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\\n                    k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\\n                    k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\\n                    k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\\n                    return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\\n          y = [yo]\\n          while True:\\n            if tau > 0:\\n              tau = min(tau, tEnd - to)\\n            else:\\n              tau = max(tau, tEnd-to)\\n            to = to + tau\\n            if to == tEnd:\\n              break\\n            yo = yo + increment(f, to, yo, tau, p)\\n            y.append(yo)\\n          return array(y)\\n\\ndef hydra_function(t, y, lambda_):\\n  #p_ext = 1.013250\\n  #R = 0.098   # R_a из записей\\n  #T = 0.8 # взял период в 1 секунду\\n  #C = 0.08  #c_a\\n  #I = 4.64    # I_a\\n  #V0 = 87  #см**3 из записей\\n  #heart_delta_p = 0.3\\n\\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\\n\\n  # граничные условия(сумма масс и Бернулли)\\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\\n  # eps1 * f[1] + eps2 * f[3] = 0\\n\\n  # бернулли:\\n  #q - плотность\\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\\n  # eps1 * moment1 + eps2 * moment2 = 0\\n\\n  f = np.zeros(4)\\n  #y[0] = V_1\\n  #y[1] = V_1"\\n  #y[2] = V_2\\n  #y[3] = V_2"\\n\\n  # пусть первый сосуд - сердце\\n\\n\\n  p_ext = 1.17\\n  #p_ext = lambda_\\n  V0=87\\n#\\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\\n  #c1,r1,I,T = [3,lambda_,3,1]\\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n\\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\\n\\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\\n\\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\\n\\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\\n\\n  #print("y", y)\\n  #print("f",f)\\n  return f\\n\\n\\ndef initial_checker_for_hydra(y_all,lambda_):\\n  left = y_all[0]\\n  right = y_all[-1]\\n  eps1 = 1\\n  eps2 = 0.5\\n  p_k = 0.1\\n  q = 0.1\\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\\n\\n  residuals = []\\n\\n\\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\\n  #c1,r1,I,T = [3,lambda_,3,1]\\n\\n  p_ext = 1.17\\n  #p_ext = lambda_\\n\\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n  s1 = 0.89\\n  s2 = 0.97\\n\\n  #c2=c1\\n  #r2=r1\\n\\n\\n  # Сохранение масс\\n  residuals.append(2650*right[1] - 3000*left[3])\\n  residuals.append(2650*left[1] - 3000*right[3])\\n\\n  # Бернулли\\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n\\n  # Сохранение масс\\n  #residuals.append(right[1] - left[3])\\n  #residuals.append(left[1] - right[3])\\n\\n  # Бернулли\\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n\\n  return np.array(residuals)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"1856d88c146d49718b6e71bdda94929e\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = []\\nFrech_dets = []\\neigenvals = []\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"b152f64f012c42e088b54c3390589a35\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"028703a6cf134217836134ffde948995\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def drop_parameter(arr, idx):               # временно удаляет один параметр\\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\\n  return np.delete(arr, idx)\\n\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"e4e7d7359f9747c7be127f2688877039\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\\n              func,\\n              left,\\n              right,\\n              step,\\n              bc,\\n              eps=1e-4):\\n  steps = 0\\n  frech_ans = 1e9\\n  while(True):\\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        ys = y\\n        residuals = bc(y,approx[-1])\\n        #print(f"residuals {steps}", residuals)\\n        if (np.abs(residuals) < eps).all():\\n          #print("max", max(residuals))\\n          break\\n        steps += 1\\n        F = np.zeros((len(approx) - 1, len(approx)))\\n        #метод Ньютона\\n        for i in range(len(approx)):\\n            if i == stepping_param_idx:\\n              continue\\n            y_approx = approx.copy()\\n            y_approx[i] += eps\\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\\n            residuals_i = bc(y_i, approx[-1])\\n            \\n            F[:, i] = (residuals_i - residuals) / eps\\n\\n        F = np.delete(F, stepping_param_idx, axis=1)\\n        frech_ans = np.linalg.det(F)              # определитель Фреше\\n\\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\\n            print("определитель матрицы фреше равен 0")\\n            return False, steps, ys, approx, frech_ans\\n\\n        res = np.dot(np.linalg.inv(F), residuals)\\n        res = np.insert(res, stepping_param_idx, 0)\\n        approx = approx - res\\n\\n        #for i in range(len(approx)):\\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\\n\\n        # конец метода Ньютона\\n\\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        \\n  if steps>0:\\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\\n  else:\\n    eigenvals.append(np.zeros(2))    \\n  return True, steps, ys, approx, frech_ans\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"1240e7fbe1894d71bc95814fa7af823b\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  previous_approximation = np.zeros(approx.shape)\\n  last_approximation = np.zeros(approx.shape)\\n  #print("last", last_approximation)\\n  # начальный параметр(например давление) p\\n  \\n  #approx[stepping_param_idx] -= step\\n  steps_streak=0\\n  max_steps_streak=0\\n  is_inf = False\\n  first_step=True \\n  \\n  while abs(step) > 1e-4:\\n\\n    print("step", step)\\n    print("shoot", approx[stepping_param_idx] + step)\\n\\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\\n    approx_try[stepping_param_idx] += step\\n\\n    shoot = shooting(stepping_param_idx, approx = approx_try,\\n                     func = hydra_function, left = 0, right = 1,\\n                     step = 0.01,\\n                     bc = initial_checker_for_hydra)      # метод пристрелки\\n    print(shoot[0], shoot[1], shoot[3], "\\\\n")\\n\\n    #if steps_streak > 20 and step > 5:\\n    #  is_inf = True\\n    #  break\\n\\n    if shoot[0]:    # если не критическая точка\\n      #if shoot[1] < 3 and step < 0.05:\\n      if step < 10:\\n        step *= 1.2\\n\\n      steps_streak += 1\\n      previous_approximation = last_approximation\\n      approx = shoot[3]\\n      graph_nodes.append(approx)\\n      Frech_dets.append(shoot[4])\\n      last_approximation = approx\\n\\n    else:\\n      step /= 2\\n      steps_streak = 0\\n\\n  if not is_inf:\\n    print("предельная точка", approx[stepping_param_idx])\\n\\n  #is_inf - уходим ли мы в бесконечность\\n\\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"fcee53fb00a54783bdba2cded477fbc1\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  # diff - массив разностей параметров на последнем шаге\\n  #print("diff")\\n  #print(stepping_param_idx)\\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\\n  max_idx=0\\n  max1=0\\n  for i in range(len(diff)):\\n    if i != stepping_param_idx and abs(diff[i]) > max1:\\n      max1 = abs(diff[i])\\n      max_idx = i\\n  print("diff", diff)\\n  stepping_param_idx = max_idx\\n  print("new param", stepping_param_idx)\\n  #new_step = sign(diff[max_idx])*0.01\\n\\n  if diff[max_idx] > 0:\\n    new_step = 0.01\\n  else:\\n    new_step = -0.01\\n\\n  print("new_step", new_step)\\n  return stepping_param_idx, new_step\\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"b7eb21faf13b4b5bb3eaa58c5000108e\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def branches_search(stepping_param_idx, approx, step = 0.01):\\n  #step = 0.01\\n  while 1 == 1:\\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\\n    if is_inf:\\n      break\\n    print("Смена параметра")\\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\\n    print("approx", approx)\\n    # branches_search(p, approx) если строим рекурсивно все ветви\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"c1d22ce112d0439699b236af41ccd58e\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"approx = np.zeros(5)\\n#approx[0] = 0.84740926\\n#approx[1] = -1.28941452\\napprox[4] = 0\\n#\\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\\n\\nbranches_search(len(approx) - 1, approx, step=0.01)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"5a1681bc1ea94aa59fb45b5b921627c9\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = np.array(graph_nodes)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"5a73cf217a4c4427903c7ed5b8740d09\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\\nplt.xlabel("u")\\nplt.ylabel("lambda")\\nplt.grid ( True )\\nplt.show()\\n\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"47eaa41ce77b4077af33eefe155014ba\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\\nplt.xlabel("lambda")\\nplt.ylabel("Frech_det")\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"f54f3ab1dd8646e397aeae546291bd71\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\nplt.plot(graph_nodes[:,0], Frech_dets)\\nplt.xlabel("u")\\nplt.ylabel("Freche det")\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"f4f3530671aa40338d39240b106404fe\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"469703cb99f549558c2e417542a5c456\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"eigenvals = np.array(eigenvals)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"d81ca86913904531af425d17504abe77\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"8ec835ceb65c4b848039b4c29862ed62\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"d55c56a590514bb0860630bfc2ffc7da\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"eigenvals\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"9023673f445b4fee8a96c35379527829\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"c1,r1,I,T = [0.47,0.61,0.62,1]\\nprint((4*I/c1)**2)\\nprint(r1)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"37ce4e78e23c4e8c8de1f4f6d9b5e964\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\\nplt.xlabel("u")\\nplt.ylabel("lambda")\\nplt.grid ( True )\\nplt.show()\\n\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"b53080f67a594d59b8886cb654f32ef6\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"e80943df41c04ba6ab1862056b2ec4c1\\"\n  }\n]\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:13.959Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1856d88c146d49718b6e71bdda94929e\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\n\ndef Runge_Kutta(to, tEnd, yo, tau, f, p):\n          def increment(f, t, y, tau, p):\n                    k1=tau*f(t,y, p)\n                    k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n                    k3 =tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n                    k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n                    k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n                    k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n                    return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          y = [yo]\n          while True:\n            if tau > 0:\n              tau = min(tau, tEnd - to)\n            else:\n              tau = max(tau, tEnd-to)\n            to = to + tau\n            if to == tEnd:\n              break\n            yo = yo + increment(f, to, yo, tau, p)\n            y.append(yo)\n          return array(y)\n\ndef hydra_function(t, y, lambda_):\n  #p_ext = 1.013250\n  #R = 0.098   # R_a из записей\n  #T = 0.8 # взял период в 1 секунду\n  #C = 0.08  #c_a\n  #I = 4.64    # I_a\n  #V0 = 87  #см**3 из записей\n  #heart_delta_p = 0.3\n\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\n\n  # граничные условия(сумма масс и Бернулли)\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\n  # eps1 * f[1] + eps2 * f[3] = 0\n\n  # бернулли:\n  #q - плотность\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\n  # eps1 * moment1 + eps2 * moment2 = 0\n\n  f = np.zeros(4)\n  #y[0] = V_1\n  #y[1] = V_1"\n  #y[2] = V_2\n  #y[3] = V_2"\n\n  # пусть первый сосуд - сердце\n\n\n  p_ext = 1.17\n  #p_ext = lambda_\n  V0=87\n#\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\n\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\n\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\n\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\n\n  #print("y", y)\n  #print("f",f)\n  return f\n\n\ndef initial_checker_for_hydra(y_all,lambda_):\n  left = y_all[0]\n  right = y_all[-1]\n  eps1 = 1\n  eps2 = 0.5\n  p_k = 0.1\n  q = 0.1\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\n\n  residuals = []\n\n\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n\n  p_ext = 1.17\n  #p_ext = lambda_\n\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n  s1 = 0.89\n  s2 = 0.97\n\n  #c2=c1\n  #r2=r1\n\n\n  # Сохранение масс\n  residuals.append(2650*right[1] - 3000*left[3])\n  residuals.append(2650*left[1] - 3000*right[3])\n\n  # Бернулли\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  # Сохранение масс\n  #residuals.append(right[1] - left[3])\n  #residuals.append(left[1] - right[3])\n\n  # Бернулли\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:14.397Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":1,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:14.887Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":3,\"cell_source\":\"def drop_parameter(arr, idx):               # временно удаляет один параметр\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\n  return np.delete(arr, idx)\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:15.048Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":4,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:15.727Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":5,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:15.915Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":6,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:35:16.043Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":7,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  #step = 0.01\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.299Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":10,\"cell_source\":\"approx = np.zeros(5)\n#approx[0] = 0.84740926\n#approx[1] = -1.28941452\napprox[4] = 0\n#\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":4239},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:37:29.299Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.321Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":10,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.367Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":10,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.373Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":10,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.382Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":10,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.391Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":10,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.400Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":10,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.407Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":10,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.415Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9023673f445b4fee8a96c35379527829\",\"cell_num\":10,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.422Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"37ce4e78e23c4e8c8de1f4f6d9b5e964\",\"cell_num\":10,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:29.430Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":10,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:30.945Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:31.102Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:31.698Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":12,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:31.905Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":17447}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:32.278Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":13,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:32.411Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:32.728Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:32.884Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":18539}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:33.436Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":15,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:33.458Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":16,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":362}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:34.304Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":16,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:34.323Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":17,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:35.551Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:35.688Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":19615}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:38.770Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"9023673f445b4fee8a96c35379527829\",\"cell_num\":19,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:38.793Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9023673f445b4fee8a96c35379527829\",\"cell_num\":20,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1312}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:38.906Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"37ce4e78e23c4e8c8de1f4f6d9b5e964\",\"cell_num\":20,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:39.069Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"37ce4e78e23c4e8c8de1f4f6d9b5e964\",\"cell_num\":21,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":27}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:39.422Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":21,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:39.579Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":22,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":9983}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:37:44.993Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"d55c56a590514bb0860630bfc2ffc7da\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:39:01.635Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":1,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:42:20.736Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"9023673f445b4fee8a96c35379527829\",\"cell_num\":null,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:42:24.611Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"37ce4e78e23c4e8c8de1f4f6d9b5e964\",\"cell_num\":null,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:53.069Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.456Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5d33c36196ce4f018d500cda7e7ffb7a\",\"cell_num\":13,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.458Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1856d88c146d49718b6e71bdda94929e\",\"cell_num\":13,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.459Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":13,\"cell_source\":\"def increment(f, t, y, tau, p):\n    k1=tau*f(t,y, p)\n    k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n    k3 =tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n    k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n    k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n    k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n    return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.461Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"337cd024003c4d81b8fa0001fc67a0fa\",\"cell_num\":13,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n\n    V0=87\n    \n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    f[0] = y[1]\n\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    f[2] = y[3]\n\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    \n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.462Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"6c990c5a6c074bfc96bd9f07f2409297\",\"cell_num\":13,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    \n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    s1 = 0.89\n\n    s2 = 0.97\n\n\n  # The conservation of mass\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli equation \n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.464Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":13,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.465Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":13,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.466Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":13,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.469Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":13,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.472Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":13,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:44:54.474Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":13,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.173Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":748},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:45:34.173Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.178Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.182Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.186Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.211Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.226Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":11,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.235Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":11,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.243Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:34.250Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:37.161Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:37.202Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:37.415Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:37.626Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":14,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":15503}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:37.740Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:38.012Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:38.590Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:38.748Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":17851}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:39.070Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":16,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:39.091Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":17,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":117}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:40.230Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":17,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:40.251Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":18,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:41.103Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:41.256Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":18519}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:47.989Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:45:48.142Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":8823}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:04.020Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":2,\"cell_source\":\"def increment(f, t, y, tau, p):\n    k1 = tau * f(t, y, p)\n    k2 = tau * f(t + 1/4*tau, y + 1/4*k1, p)\n    k3 = tau * f(t + 3/8*tau, y + 3/32*k1 + 9/32*k2, p)\n    k4 = tau * f(t + 12/13*tau, y + 1932/2197*k1 - 7200/2197*k2 + 7296/2197*k3, p)\n    k5 = tau * f(t + tau, y + 439/216*k1 - 8*k2 + 3680/513*k3 - 845/4104*k4, p)\n    k6 = tau * f(t + 1/2*tau, y - 8/27*k1 + 2*k2 - 3544/2565*k3 + 1859/4104*k4 - 11/40*k5, p)\n    return 16/135*k1 + 6656/12825*k3 + 28561/56430*k4 - 9/50*k5 + 2/55*k6\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:04.049Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":3,\"cell_source\":\"def increment(f, t, y, tau, p):\n    k1 = tau * f(t, y, p)\n    k2 = tau * f(t + 1/4*tau, y + 1/4*k1, p)\n    k3 = tau * f(t + 3/8*tau, y + 3/32*k1 + 9/32*k2, p)\n    k4 = tau * f(t + 12/13*tau, y + 1932/2197*k1 - 7200/2197*k2 + 7296/2197*k3, p)\n    k5 = tau * f(t + tau, y + 439/216*k1 - 8*k2 + 3680/513*k3 - 845/4104*k4, p)\n    k6 = tau * f(t + 1/2*tau, y - 8/27*k1 + 2*k2 - 3544/2565*k3 + 1859/4104*k4 - 11/40*k5, p)\n    return 16/135*k1 + 6656/12825*k3 + 28561/56430*k4 - 9/50*k5 + 2/55*k6\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:05.677Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"337cd024003c4d81b8fa0001fc67a0fa\",\"cell_num\":3,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n\n    V0=87\n    \n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    f[0] = y[1]\n\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    f[2] = y[3]\n\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    \n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:05.708Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"337cd024003c4d81b8fa0001fc67a0fa\",\"cell_num\":4,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n\n    V0=87\n    \n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    f[0] = y[1]\n\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    f[2] = y[3]\n\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    \n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:05.839Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"6c990c5a6c074bfc96bd9f07f2409297\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    \n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    s1 = 0.89\n\n    s2 = 0.97\n\n\n  # The conservation of mass\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli equation \n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:05.956Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:05.980Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"6c990c5a6c074bfc96bd9f07f2409297\",\"cell_num\":6,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    \n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    s1 = 0.89\n\n    s2 = 0.97\n\n\n  # The conservation of mass\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli equation \n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.116Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.158Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.403Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.582Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.694Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.824Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.850Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":10,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.947Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:47:06.996Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":11,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.199Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2308},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:48:38.199Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.213Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.219Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.231Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.236Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.238Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":11,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.247Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":11,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.251Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:38.256Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:40.061Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:40.092Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:40.648Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:40.802Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":14,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":17399}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:40.915Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:41.183Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:41.490Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:41.726Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":18599}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:42.058Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":16,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:42.081Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":17,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":193}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:42.701Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":17,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:42.722Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":18,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:43.400Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:43.554Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":20463}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:47.542Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:48:47.705Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":9631}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:49:19.780Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"469703cb99f549558c2e417542a5c456\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:49:22.879Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"f54f3ab1dd8646e397aeae546291bd71\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:28.304Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals.append(np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals.append(np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:28.341Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals.append(np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals.append(np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:29.568Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:29.596Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:29.778Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:29.870Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:30.429Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:30.450Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:34.989Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":15,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:51:34.989Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":15,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "append"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:35.000Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:35.011Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":15,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:35.019Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:48.341Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5d33c36196ce4f018d500cda7e7ffb7a\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:48.365Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5d33c36196ce4f018d500cda7e7ffb7a\",\"cell_num\":1,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:48.841Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1856d88c146d49718b6e71bdda94929e\",\"cell_num\":1,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:48.867Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1856d88c146d49718b6e71bdda94929e\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:48.926Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":2,\"cell_source\":\"def increment(f, t, y, tau, p):\n    k1 = tau * f(t, y, p)\n    k2 = tau * f(t + 1/4*tau, y + 1/4*k1, p)\n    k3 = tau * f(t + 3/8*tau, y + 3/32*k1 + 9/32*k2, p)\n    k4 = tau * f(t + 12/13*tau, y + 1932/2197*k1 - 7200/2197*k2 + 7296/2197*k3, p)\n    k5 = tau * f(t + tau, y + 439/216*k1 - 8*k2 + 3680/513*k3 - 845/4104*k4, p)\n    k6 = tau * f(t + 1/2*tau, y - 8/27*k1 + 2*k2 - 3544/2565*k3 + 1859/4104*k4 - 11/40*k5, p)\n    return 16/135*k1 + 6656/12825*k3 + 28561/56430*k4 - 9/50*k5 + 2/55*k6\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.006Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"337cd024003c4d81b8fa0001fc67a0fa\",\"cell_num\":3,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n\n    V0 = 87\n    \n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    f[0] = y[1]\n\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    f[2] = y[3]\n\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    \n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.093Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"6c990c5a6c074bfc96bd9f07f2409297\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    \n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    s1 = 0.89\n\n    s2 = 0.97\n\n\n  # The conservation of mass\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli equation \n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.146Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":5,\"cell_source\":\"def increment(f, t, y, tau, p):\n    k1 = tau * f(t, y, p)\n    k2 = tau * f(t + 1/4*tau, y + 1/4*k1, p)\n    k3 = tau * f(t + 3/8*tau, y + 3/32*k1 + 9/32*k2, p)\n    k4 = tau * f(t + 12/13*tau, y + 1932/2197*k1 - 7200/2197*k2 + 7296/2197*k3, p)\n    k5 = tau * f(t + tau, y + 439/216*k1 - 8*k2 + 3680/513*k3 - 845/4104*k4, p)\n    k6 = tau * f(t + 1/2*tau, y - 8/27*k1 + 2*k2 - 3544/2565*k3 + 1859/4104*k4 - 11/40*k5, p)\n    return 16/135*k1 + 6656/12825*k3 + 28561/56430*k4 - 9/50*k5 + 2/55*k6\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.172Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.257Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.292Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"337cd024003c4d81b8fa0001fc67a0fa\",\"cell_num\":7,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n\n    V0 = 87\n    \n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    f[0] = y[1]\n\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    f[2] = y[3]\n\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    \n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.344Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals.append(np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals.append(np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.426Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.452Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"6c990c5a6c074bfc96bd9f07f2409297\",\"cell_num\":9,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    \n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    s1 = 0.89\n\n    s2 = 0.97\n\n\n  # The conservation of mass\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli equation \n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.511Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.590Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.720Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":11,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:51:49.868Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":11,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:02.121Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1814},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:53:02.121Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:03.983Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:04.010Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:04.355Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:04.512Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":14,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":16775}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:04.687Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:04.919Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":18411}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:05.201Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":15,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:05.223Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":16,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:05.964Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":16,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:06.118Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":20007}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:06.614Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:53:06.765Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":9575}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:54:27.956Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:54:27.981Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:54:32.938Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":12,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:54:32.938Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "append"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:54:33.009Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:54:33.329Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:11.728Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals.np.append(np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals.np.append(np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:11.770Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals.np.append(np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals.np.append(np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:12.154Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:12.182Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:12.377Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:12.468Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:12.500Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.299Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":18,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:55:17.299Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":18,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "np"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.305Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":18,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.321Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.327Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.332Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":18,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.339Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:55:17.347Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:20.932Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:20.975Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:21.278Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:21.310Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:21.509Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:21.580Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:21.747Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:21.872Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.472Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":18,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:56:26.472Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":18,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"UnboundLocalError\\",\\"evalue\\":\\"local variable "eigenvals" referenced before assignment\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.480Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":18,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.490Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.499Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.505Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":18,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.513Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:26.517Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:43.794Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":18,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.373Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5d33c36196ce4f018d500cda7e7ffb7a\",\"cell_num\":18,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.374Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1856d88c146d49718b6e71bdda94929e\",\"cell_num\":18,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.376Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"10daff1a5dd34b108b5b5da4204eead8\",\"cell_num\":18,\"cell_source\":\"def increment(f, t, y, tau, p):\n    k1 = tau * f(t, y, p)\n    k2 = tau * f(t + 1/4*tau, y + 1/4*k1, p)\n    k3 = tau * f(t + 3/8*tau, y + 3/32*k1 + 9/32*k2, p)\n    k4 = tau * f(t + 12/13*tau, y + 1932/2197*k1 - 7200/2197*k2 + 7296/2197*k3, p)\n    k5 = tau * f(t + tau, y + 439/216*k1 - 8*k2 + 3680/513*k3 - 845/4104*k4, p)\n    k6 = tau * f(t + 1/2*tau, y - 8/27*k1 + 2*k2 - 3544/2565*k3 + 1859/4104*k4 - 11/40*k5, p)\n    return 16/135*k1 + 6656/12825*k3 + 28561/56430*k4 - 9/50*k5 + 2/55*k6\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.379Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"337cd024003c4d81b8fa0001fc67a0fa\",\"cell_num\":18,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n\n    V0 = 87\n    \n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    f[0] = y[1]\n\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    f[2] = y[3]\n\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    \n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.381Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"6c990c5a6c074bfc96bd9f07f2409297\",\"cell_num\":18,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    \n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    s1 = 0.89\n\n    s2 = 0.97\n\n\n  # The conservation of mass\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli equation \n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.383Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":18,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.385Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":18,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.386Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":18,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.387Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":18,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.389Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":18,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:45.391Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":18,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.355Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":20,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:56:52.355Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":20,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"UnboundLocalError\\",\\"evalue\\":\\"local variable "eigenvals" referenced before assignment\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.358Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":20,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.372Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.386Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.396Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":20,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.402Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:56:52.408Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b53080f67a594d59b8886cb654f32ef6\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:14.521Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":6,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\nglobal eigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:58:14.521Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":6,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"SyntaxError\\",\\"evalue\\":\\"invalid syntax (<ipython-input-13-2a95c849efa2>, line 3)\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:27.907Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\nglobal eigenvals\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:27.929Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b152f64f012c42e088b54c3390589a35\",\"cell_num\":6,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\nglobal eigenvals\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:28.366Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:28.409Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e4e7d7359f9747c7be127f2688877039\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):\n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:28.539Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:28.662Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:29.047Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:29.074Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:29.551Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:29.574Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:30.761Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:30.783Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:35.691Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":17,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:58:35.691Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":17,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"UnboundLocalError\\",\\"evalue\\":\\"local variable "eigenvals" referenced before assignment\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:35.693Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":17,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:35.703Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:35.712Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f4f3530671aa40338d39240b106404fe\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:35.718Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d81ca86913904531af425d17504abe77\",\"cell_num\":17,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:58:35.724Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8ec835ceb65c4b848039b4c29862ed62\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.049Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    global eigenvals\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.093Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1240e7fbe1894d71bc95814fa7af823b\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx, func, left, right, step, bc, eps=1e-4):\n    global eigenvals\n    steps = 0\n    frech_ans = 1e9\n    while True:\n        y = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n        ys = y\n        residuals = bc(y, approx[-1])\n        # print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n            # print("max", max(residuals))\n            break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        # метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n                continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((\n                Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]\n            ))\n            residuals_i = bc(y_i, approx[-1])\n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)  # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:  # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # for i in range(len(approx)):\n        #   approx[params_idxs[i]] -= matrix_step            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((\n            Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n            Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]\n        ))\n\n    if steps > 0:\n        eigenvals = np.concatenate(eigenvals, np.linalg.eig(F)[0][-2:])\n    else:\n        eigenvals = np.concatenate(eigenvals,np.zeros(2))\n    return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.224Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.329Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.367Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcee53fb00a54783bdba2cded477fbc1\",\"cell_num\":10,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.417Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c1d22ce112d0439699b236af41ccd58e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    is_inf = False\n    while not is_inf:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        print("Смена параметра")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\n    return approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:07.513Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b7eb21faf13b4b5bb3eaa58c5000108e\",\"cell_num\":11,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:12.363Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":14,\"cell_source\":\"approx = np.zeros(5)\napprox[4] = 0\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T13:59:12.363Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"5a1681bc1ea94aa59fb45b5b921627c9\",\"cell_num\":14,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"only integer scalar arrays can be converted to a scalar index\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:12.366Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5a73cf217a4c4427903c7ed5b8740d09\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T13:59:12.374Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47eaa41ce77b4077af33eefe155014ba\",\"cell_num\":14,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:00:14.278Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"from numpy  import*\\nimport matplotlib.pyplot as plt\\nimport matplotlib.font_manager as fm,os\\nimport matplotlib.patches as mpatches\\nimport matplotlib.lines as mlines\\nfrom scipy.integrate import odeint\\nfrom scipy import linalg\\nimport time\\nfrom numpy.linalg import det, inv, svd, norm\\nimport numpy as np\\n\\ndef Runge_Kutta(to, tEnd, yo, tau, f, p):\\n          def increment(f, t, y, tau, p):\\n                    k1=tau*f(t,y, p)\\n                    k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\\n                    k3 =tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\\n                    k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\\n                    k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\\n                    k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\\n                    return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\\n          y = [yo]\\n          while True:\\n            if tau > 0:\\n              tau = min(tau, tEnd - to)\\n            else:\\n              tau = max(tau, tEnd-to)\\n            to = to + tau\\n            if to == tEnd:\\n              break\\n            yo = yo + increment(f, to, yo, tau, p)\\n            y.append(yo)\\n          return array(y)\\n\\ndef hydra_function(t, y, lambda_):\\n  #p_ext = 1.013250\\n  #R = 0.098   # R_a из записей\\n  #T = 0.8 # взял период в 1 секунду\\n  #C = 0.08  #c_a\\n  #I = 4.64    # I_a\\n  #V0 = 87  #см**3 из записей\\n  #heart_delta_p = 0.3\\n\\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\\n\\n  # граничные условия(сумма масс и Бернулли)\\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\\n  # eps1 * f[1] + eps2 * f[3] = 0\\n\\n  # бернулли:\\n  #q - плотность\\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\\n  # eps1 * moment1 + eps2 * moment2 = 0\\n\\n  f = np.zeros(4)\\n  #y[0] = V_1\\n  #y[1] = V_1"\\n  #y[2] = V_2\\n  #y[3] = V_2"\\n\\n  # пусть первый сосуд - сердце\\n\\n\\n  p_ext = 1.17\\n  #p_ext = lambda_\\n  V0=87\\n#\\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\\n  #c1,r1,I,T = [3,lambda_,3,1]\\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n\\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\\n\\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\\n\\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\\n\\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\\n\\n  #print("y", y)\\n  #print("f",f)\\n  return f\\n\\n\\ndef initial_checker_for_hydra(y_all,lambda_):\\n  left = y_all[0]\\n  right = y_all[-1]\\n  eps1 = 1\\n  eps2 = 0.5\\n  p_k = 0.1\\n  q = 0.1\\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\\n\\n  residuals = []\\n\\n\\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\\n  #c1,r1,I,T = [3,lambda_,3,1]\\n\\n  p_ext = 1.17\\n  #p_ext = lambda_\\n\\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n  s1 = 0.89\\n  s2 = 0.97\\n\\n  #c2=c1\\n  #r2=r1\\n\\n\\n  # Сохранение масс\\n  residuals.append(2650*right[1] - 3000*left[3])\\n  residuals.append(2650*left[1] - 3000*right[3])\\n\\n  # Бернулли\\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n\\n  # Сохранение масс\\n  #residuals.append(right[1] - left[3])\\n  #residuals.append(left[1] - right[3])\\n\\n  # Бернулли\\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n\\n  return np.array(residuals)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"7f438760398c41a68b6efb98de6c805e\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = []\\nFrech_dets = []\\neigenvals = []\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"1be7c38df4a244149bedd415ab31a293\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"f46875d7ff3f4eb7834a859eb99e576b\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def drop_parameter(arr, idx):               # временно удаляет один параметр\\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\\n  return np.delete(arr, idx)\\n\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"47628d2f297e472988e9df160d24d9a7\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\\n              func,\\n              left,\\n              right,\\n              step,\\n              bc,\\n              eps=1e-4):\\n  steps = 0\\n  frech_ans = 1e9\\n  while(True):\\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        ys = y\\n        residuals = bc(y,approx[-1])\\n        #print(f"residuals {steps}", residuals)\\n        if (np.abs(residuals) < eps).all():\\n          #print("max", max(residuals))\\n          break\\n        steps += 1\\n        F = np.zeros((len(approx) - 1, len(approx)))\\n        #метод Ньютона\\n        for i in range(len(approx)):\\n            if i == stepping_param_idx:\\n              continue\\n            y_approx = approx.copy()\\n            y_approx[i] += eps\\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\\n            residuals_i = bc(y_i, approx[-1])\\n            \\n            F[:, i] = (residuals_i - residuals) / eps\\n\\n        F = np.delete(F, stepping_param_idx, axis=1)\\n        frech_ans = np.linalg.det(F)              # определитель Фреше\\n\\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\\n            print("определитель матрицы фреше равен 0")\\n            return False, steps, ys, approx, frech_ans\\n\\n        res = np.dot(np.linalg.inv(F), residuals)\\n        res = np.insert(res, stepping_param_idx, 0)\\n        approx = approx - res\\n\\n        #for i in range(len(approx)):\\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\\n\\n        # конец метода Ньютона\\n\\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        \\n  if steps>0:\\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\\n  else:\\n    eigenvals.append(np.zeros(2))    \\n  return True, steps, ys, approx, frech_ans\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"5b821fe6527749648c1ff8c75f30d669\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  previous_approximation = np.zeros(approx.shape)\\n  last_approximation = np.zeros(approx.shape)\\n  #print("last", last_approximation)\\n  # начальный параметр(например давление) p\\n  \\n  #approx[stepping_param_idx] -= step\\n  steps_streak=0\\n  max_steps_streak=0\\n  is_inf = False\\n  first_step=True \\n  \\n  while abs(step) > 1e-4:\\n\\n    print("step", step)\\n    print("shoot", approx[stepping_param_idx] + step)\\n\\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\\n    approx_try[stepping_param_idx] += step\\n\\n    shoot = shooting(stepping_param_idx, approx = approx_try,\\n                     func = hydra_function, left = 0, right = 1,\\n                     step = 0.01,\\n                     bc = initial_checker_for_hydra)      # метод пристрелки\\n    print(shoot[0], shoot[1], shoot[3], "\\\\n")\\n\\n    #if steps_streak > 20 and step > 5:\\n    #  is_inf = True\\n    #  break\\n\\n    if shoot[0]:    # если не критическая точка\\n      #if shoot[1] < 3 and step < 0.05:\\n      if step < 10:\\n        step *= 1.2\\n\\n      steps_streak += 1\\n      previous_approximation = last_approximation\\n      approx = shoot[3]\\n      graph_nodes.append(approx)\\n      Frech_dets.append(shoot[4])\\n      last_approximation = approx\\n\\n    else:\\n      step /= 2\\n      steps_streak = 0\\n\\n  if not is_inf:\\n    print("предельная точка", approx[stepping_param_idx])\\n\\n  #is_inf - уходим ли мы в бесконечность\\n\\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"a66353d035104f0e8145b390c432a5d7\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  # diff - массив разностей параметров на последнем шаге\\n  #print("diff")\\n  #print(stepping_param_idx)\\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\\n  max_idx=0\\n  max1=0\\n  for i in range(len(diff)):\\n    if i != stepping_param_idx and abs(diff[i]) > max1:\\n      max1 = abs(diff[i])\\n      max_idx = i\\n  print("diff", diff)\\n  stepping_param_idx = max_idx\\n  print("new param", stepping_param_idx)\\n  #new_step = sign(diff[max_idx])*0.01\\n\\n  if diff[max_idx] > 0:\\n    new_step = 0.01\\n  else:\\n    new_step = -0.01\\n\\n  print("new_step", new_step)\\n  return stepping_param_idx, new_step\\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"a07d446f033145228468856c2402b82a\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def branches_search(stepping_param_idx, approx, step = 0.01):\\n  #step = 0.01\\n  while 1 == 1:\\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\\n    if is_inf:\\n      break\\n    print("Смена параметра")\\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\\n    print("approx", approx)\\n    # branches_search(p, approx) если строим рекурсивно все ветви\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"89e419f9da1d4cb5b568677ad0517868\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"approx = np.zeros(5)\\n#approx[0] = 0.84740926\\n#approx[1] = -1.28941452\\napprox[4] = 0\\n#\\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\\n\\nbranches_search(len(approx) - 1, approx, step=0.01)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"8446908a645a4cf38454910156569af3\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = np.array(graph_nodes)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"c26934a88a4f445b830db73b6d6ae34a\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\\nplt.xlabel("u")\\nplt.ylabel("lambda")\\nplt.grid ( True )\\nplt.show()\\n\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"d2f175057fe343909dcd3dac2c200b23\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\\nplt.xlabel("lambda")\\nplt.ylabel("Frech_det")\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"e52440571a6849d99477855d30f6b913\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\nplt.plot(graph_nodes[:,0], Frech_dets)\\nplt.xlabel("u")\\nplt.ylabel("Freche det")\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"c037cca123f0448faab78c1ee67e0fb4\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"ca267a7a11e7483485560fa07185369b\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"eigenvals = np.array(eigenvals)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"ecca0a7ddf834196b341c7cba2edb9eb\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"9cbabcadb39643d98cba221949567c4d\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"9dbf52abd14a4993a6f26c12528c0093\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"eigenvals\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"6f0baa7c9c294a848634407aa587d4c8\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"c1,r1,I,T = [0.47,0.61,0.62,1]\\nprint((4*I/c1)**2)\\nprint(r1)\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"62295a99263a4f49887a8805eebc8394\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\\nplt.xlabel("u")\\nplt.ylabel("lambda")\\nplt.grid ( True )\\nplt.show()\\n\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"51fad39ea95f4f24801516248af377a3\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"6eaccc9589ee4cbf8f598933df50b9e8\\"\n  }\n]\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:00:25.380Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"92a1a44b1106499fb443d11c94948ea9\",\"cell_num\":0,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:00:48.408Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"97964d905cea4ff4921b81fcb66a7110\",\"cell_num\":1,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:00:55.933Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"c36543f2ed314dafbee07dd267ec6684\",\"cell_num\":2,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:04.030Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"f46875d7ff3f4eb7834a859eb99e576b\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:20.378Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"9dbf52abd14a4993a6f26c12528c0093\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:21.517Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"6f0baa7c9c294a848634407aa587d4c8\",\"cell_num\":null,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:23.507Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"6eaccc9589ee4cbf8f598933df50b9e8\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:31.075Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":19,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.687Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"7f438760398c41a68b6efb98de6c805e\",\"cell_num\":19,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.690Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"92a1a44b1106499fb443d11c94948ea9\",\"cell_num\":19,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n          def increment(f, t, y, tau, p):\n                    k1=tau*f(t,y, p)\n                    k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n                    k3 =tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n                    k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n                    k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n                    k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n                    return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          y = [yo]\n          while True:\n            if tau > 0:\n              tau = min(tau, tEnd - to)\n            else:\n              tau = max(tau, tEnd-to)\n            to = to + tau\n            if to == tEnd:\n              break\n            yo = yo + increment(f, to, yo, tau, p)\n            y.append(yo)\n          return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.693Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"97964d905cea4ff4921b81fcb66a7110\",\"cell_num\":19,\"cell_source\":\"def hydra_function(t, y, lambda_):\n  #p_ext = 1.013250\n  #R = 0.098   # R_a из записей\n  #T = 0.8 # взял период в 1 секунду\n  #C = 0.08  #c_a\n  #I = 4.64    # I_a\n  #V0 = 87  #см**3 из записей\n  #heart_delta_p = 0.3\n\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\n\n  # граничные условия(сумма масс и Бернулли)\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\n  # eps1 * f[1] + eps2 * f[3] = 0\n\n  # бернулли:\n  #q - плотность\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\n  # eps1 * moment1 + eps2 * moment2 = 0\n\n  f = np.zeros(4)\n  #y[0] = V_1\n  #y[1] = V_1"\n  #y[2] = V_2\n  #y[3] = V_2"\n\n  # пусть первый сосуд - сердце\n\n\n  p_ext = 1.17\n  #p_ext = lambda_\n  V0=87\n#\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\n\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\n\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\n\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\n\n  #print("y", y)\n  #print("f",f)\n  return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.698Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c36543f2ed314dafbee07dd267ec6684\",\"cell_num\":19,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n  left = y_all[0]\n  right = y_all[-1]\n  eps1 = 1\n  eps2 = 0.5\n  p_k = 0.1\n  q = 0.1\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\n\n  residuals = []\n\n\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n\n  p_ext = 1.17\n  #p_ext = lambda_\n\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n  s1 = 0.89\n  s2 = 0.97\n\n  #c2=c1\n  #r2=r1\n\n\n  # Сохранение масс\n  residuals.append(2650*right[1] - 3000*left[3])\n  residuals.append(2650*left[1] - 3000*right[3])\n\n  # Бернулли\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  # Сохранение масс\n  #residuals.append(right[1] - left[3])\n  #residuals.append(left[1] - right[3])\n\n  # Бернулли\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.702Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1be7c38df4a244149bedd415ab31a293\",\"cell_num\":19,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.707Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47628d2f297e472988e9df160d24d9a7\",\"cell_num\":19,\"cell_source\":\"def drop_parameter(arr, idx):               # временно удаляет один параметр\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\n  return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.710Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5b821fe6527749648c1ff8c75f30d669\",\"cell_num\":19,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.713Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"a66353d035104f0e8145b390c432a5d7\",\"cell_num\":19,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.721Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"a07d446f033145228468856c2402b82a\",\"cell_num\":19,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:01:32.725Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"89e419f9da1d4cb5b568677ad0517868\",\"cell_num\":19,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  #step = 0.01\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.724Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8446908a645a4cf38454910156569af3\",\"cell_num\":10,\"cell_source\":\"approx = np.zeros(5)\n#approx[0] = 0.84740926\n#approx[1] = -1.28941452\napprox[4] = 0\n#\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":9452},{\\"output_type\\":\\"stream\\",\\"size\\":4290},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T14:08:06.724Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"8446908a645a4cf38454910156569af3\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.734Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":10,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.738Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":10,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.764Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":10,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.774Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":10,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.791Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":10,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.794Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":10,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.797Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":10,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.799Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":10,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:06.805Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":10,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:08.476Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:08.508Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:09.242Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":12,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:09.413Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":15171}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:13.527Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":13,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:13.704Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":8231}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:16.009Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":14,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:16.156Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":23299}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:17.072Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":15,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:17.092Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":16,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":700}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:17.780Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":16,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:17.799Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":17,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:18.501Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:18.656Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":18,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":19247}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:21.193Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":18,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:21.229Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":19,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":27}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:21.666Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:21.672Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"be12ec48942845e5b6086d930343c7a2\",\"cell_num\":19,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:21.801Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":9423}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:32.772Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"4faef7aedc414cf18309e2fd747e9321\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:34.306Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"4faef7aedc414cf18309e2fd747e9321\",\"cell_num\":14,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:34.336Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4faef7aedc414cf18309e2fd747e9321\",\"cell_num\":15,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":700}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:08:44.881Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"4faef7aedc414cf18309e2fd747e9321\",\"cell_num\":null,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:11:51.320Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":12,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:12:01.556Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":13,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Set the figure size\nplt.figure(figsize=(8, 6))\n\n# Plot the data with blue solid line\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\n# Plot the data points with red asterisks\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\n# Set the axis labels and title\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\n# Add a grid\nplt.grid(True)\n\n# Show the plot\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:12:01.714Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":14,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Set the figure size\nplt.figure(figsize=(8, 6))\n\n# Plot the data with blue solid line\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\n# Plot the data points with red asterisks\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\n# Set the axis labels and title\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\n# Add a grid\nplt.grid(True)\n\n# Show the plot\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22667}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:13:58.065Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"2e7f1c56bcd34827862bc003cf1fe2c9\",\"cell_num\":0,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:13:58.941Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"rendered\",\"cell_index\":\"d5a168f547fc4747b12d9a33dc666610\",\"cell_num\":1,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:13:58.941Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"d5a168f547fc4747b12d9a33dc666610\",\"cell_num\":1,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:14:05.979Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"rendered\",\"cell_index\":\"d5a168f547fc4747b12d9a33dc666610\",\"cell_num\":1,\"cell_source\":\"### The Runge-Kutta numerical integration method to solve a system of first-order ordinary differential equations.\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:15:30.633Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"rendered\",\"cell_index\":\"d5a168f547fc4747b12d9a33dc666610\",\"cell_num\":1,\"cell_source\":\"### The Runge-Kutta numerical integration method.\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:53.718Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"92a1a44b1106499fb443d11c94948ea9\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1=tau*f(t,y, p)\n        k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3=tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:53.765Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"92a1a44b1106499fb443d11c94948ea9\",\"cell_num\":3,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1=tau*f(t,y, p)\n        k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3=tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:58.649Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"97964d905cea4ff4921b81fcb66a7110\",\"cell_num\":3,\"cell_source\":\"def hydra_function(t, y, lambda_):\n  #p_ext = 1.013250\n  #R = 0.098   # R_a из записей\n  #T = 0.8 # взял период в 1 секунду\n  #C = 0.08  #c_a\n  #I = 4.64    # I_a\n  #V0 = 87  #см**3 из записей\n  #heart_delta_p = 0.3\n\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\n\n  # граничные условия(сумма масс и Бернулли)\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\n  # eps1 * f[1] + eps2 * f[3] = 0\n\n  # бернулли:\n  #q - плотность\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\n  # eps1 * moment1 + eps2 * moment2 = 0\n\n  f = np.zeros(4)\n  #y[0] = V_1\n  #y[1] = V_1"\n  #y[2] = V_2\n  #y[3] = V_2"\n\n  # пусть первый сосуд - сердце\n\n\n  p_ext = 1.17\n  #p_ext = lambda_\n  V0=87\n#\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\n\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\n\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\n\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\n\n  #print("y", y)\n  #print("f",f)\n  return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:58.687Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97964d905cea4ff4921b81fcb66a7110\",\"cell_num\":4,\"cell_source\":\"def hydra_function(t, y, lambda_):\n  #p_ext = 1.013250\n  #R = 0.098   # R_a из записей\n  #T = 0.8 # взял период в 1 секунду\n  #C = 0.08  #c_a\n  #I = 4.64    # I_a\n  #V0 = 87  #см**3 из записей\n  #heart_delta_p = 0.3\n\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\n\n  # граничные условия(сумма масс и Бернулли)\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\n  # eps1 * f[1] + eps2 * f[3] = 0\n\n  # бернулли:\n  #q - плотность\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\n  # eps1 * moment1 + eps2 * moment2 = 0\n\n  f = np.zeros(4)\n  #y[0] = V_1\n  #y[1] = V_1"\n  #y[2] = V_2\n  #y[3] = V_2"\n\n  # пусть первый сосуд - сердце\n\n\n  p_ext = 1.17\n  #p_ext = lambda_\n  V0=87\n#\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\n\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\n\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\n\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\n\n  #print("y", y)\n  #print("f",f)\n  return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:58.814Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c36543f2ed314dafbee07dd267ec6684\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n  left = y_all[0]\n  right = y_all[-1]\n  eps1 = 1\n  eps2 = 0.5\n  p_k = 0.1\n  q = 0.1\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\n\n  residuals = []\n\n\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n\n  p_ext = 1.17\n  #p_ext = lambda_\n\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n  s1 = 0.89\n  s2 = 0.97\n\n  #c2=c1\n  #r2=r1\n\n\n  # Сохранение масс\n  residuals.append(2650*right[1] - 3000*left[3])\n  residuals.append(2650*left[1] - 3000*right[3])\n\n  # Бернулли\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  # Сохранение масс\n  #residuals.append(right[1] - left[3])\n  #residuals.append(left[1] - right[3])\n\n  # Бернулли\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:58.959Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1be7c38df4a244149bedd415ab31a293\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:58.984Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c36543f2ed314dafbee07dd267ec6684\",\"cell_num\":6,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n  left = y_all[0]\n  right = y_all[-1]\n  eps1 = 1\n  eps2 = 0.5\n  p_k = 0.1\n  q = 0.1\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\n\n  residuals = []\n\n\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n\n  p_ext = 1.17\n  #p_ext = lambda_\n\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n  s1 = 0.89\n  s2 = 0.97\n\n  #c2=c1\n  #r2=r1\n\n\n  # Сохранение масс\n  residuals.append(2650*right[1] - 3000*left[3])\n  residuals.append(2650*left[1] - 3000*right[3])\n\n  # Бернулли\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  # Сохранение масс\n  #residuals.append(right[1] - left[3])\n  #residuals.append(left[1] - right[3])\n\n  # Бернулли\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.128Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1be7c38df4a244149bedd415ab31a293\",\"cell_num\":6,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.223Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47628d2f297e472988e9df160d24d9a7\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):               # временно удаляет один параметр\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\n  return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.347Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5b821fe6527749648c1ff8c75f30d669\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.471Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"a66353d035104f0e8145b390c432a5d7\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.539Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47628d2f297e472988e9df160d24d9a7\",\"cell_num\":9,\"cell_source\":\"def drop_parameter(arr, idx):               # временно удаляет один параметр\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\n  return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.694Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5b821fe6527749648c1ff8c75f30d669\",\"cell_num\":9,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.843Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a66353d035104f0e8145b390c432a5d7\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:17:59.928Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"a07d446f033145228468856c2402b82a\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:18:00.269Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"89e419f9da1d4cb5b568677ad0517868\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  #step = 0.01\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.820Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8446908a645a4cf38454910156569af3\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\n#approx[0] = 0.84740926\n#approx[1] = -1.28941452\napprox[4] = 0\n#\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2499},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T14:19:40.820Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"8446908a645a4cf38454910156569af3\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.826Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.856Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.869Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":11,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.883Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.889Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.897Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":11,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.907Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":11,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.913Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.923Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":11,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:40.932Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:42.592Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:42.639Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:42.935Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:43.114Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":14,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":17399}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:48.295Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":14,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:48.464Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":15,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22971}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:51.600Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:51.742Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:52.334Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:52.499Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":18599}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:52.843Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":17,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:52.868Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":193}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.658Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"7f438760398c41a68b6efb98de6c805e\",\"cell_num\":18,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.660Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"92a1a44b1106499fb443d11c94948ea9\",\"cell_num\":18,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1=tau*f(t,y, p)\n        k2=tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3=tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4=tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5=tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6=tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.661Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"97964d905cea4ff4921b81fcb66a7110\",\"cell_num\":18,\"cell_source\":\"def hydra_function(t, y, lambda_):\n  #p_ext = 1.013250\n  #R = 0.098   # R_a из записей\n  #T = 0.8 # взял период в 1 секунду\n  #C = 0.08  #c_a\n  #I = 4.64    # I_a\n  #V0 = 87  #см**3 из записей\n  #heart_delta_p = 0.3\n\n  # средняя скорость крови в крупных сосудах(V") = 20см/c\n\n  # граничные условия(сумма масс и Бернулли)\n  # сумма масс: выход из одного сосуда равен входу в другой sum(v") = 0    eps-константа для размерности (пока V0 у всех одинаковая, eps=1)\n  # eps1 * f[1] + eps2 * f[3] = 0\n\n  # бернулли:\n  #q - плотность\n  # moment1 =  y[0]**2/2 + p_k/q     # из записей для 2 сосуда\n  # moment2 =  y[2]**2/2 + p_k/q     # из записей для 1 сосуда\n  # eps1 * moment1 + eps2 * moment2 = 0\n\n  f = np.zeros(4)\n  #y[0] = V_1\n  #y[1] = V_1"\n  #y[2] = V_2\n  #y[3] = V_2"\n\n  # пусть первый сосуд - сердце\n\n\n  p_ext = 1.17\n  #p_ext = lambda_\n  V0=87\n#\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n  # T, c1, c2, I, r1, r2 = [1, 0.47, 1.1, 1.13, 0.61, 0.93]\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n  f[0] = y[1]                                                 # первая производная V для 1 сосуда\n\n  f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)   # 2 производная V для 1 сосуда\n\n  f[2] = y[3]                                                 # первая производная V для 2 сосуда\n\n  f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)   # 2 производная V для 2 сосуда\n\n  #print("y", y)\n  #print("f",f)\n  return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.664Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c36543f2ed314dafbee07dd267ec6684\",\"cell_num\":18,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n  left = y_all[0]\n  right = y_all[-1]\n  eps1 = 1\n  eps2 = 0.5\n  p_k = 0.1\n  q = 0.1\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\n\n  residuals = []\n\n\n  # ВАЖНО (тут наработки Виты)                                                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\n  #c1,r1,I,T = [3,lambda_,3,1]\n\n  p_ext = 1.17\n  #p_ext = lambda_\n\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n  s1 = 0.89\n  s2 = 0.97\n\n  #c2=c1\n  #r2=r1\n\n\n  # Сохранение масс\n  residuals.append(2650*right[1] - 3000*left[3])\n  residuals.append(2650*left[1] - 3000*right[3])\n\n  # Бернулли\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  # Сохранение масс\n  #residuals.append(right[1] - left[3])\n  #residuals.append(left[1] - right[3])\n\n  # Бернулли\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.666Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"1be7c38df4a244149bedd415ab31a293\",\"cell_num\":18,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.668Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"47628d2f297e472988e9df160d24d9a7\",\"cell_num\":18,\"cell_source\":\"def drop_parameter(arr, idx):               # временно удаляет один параметр\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\n  return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.670Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"5b821fe6527749648c1ff8c75f30d669\",\"cell_num\":18,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.672Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"a66353d035104f0e8145b390c432a5d7\",\"cell_num\":18,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.674Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"a07d446f033145228468856c2402b82a\",\"cell_num\":18,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:19:59.677Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"89e419f9da1d4cb5b568677ad0517868\",\"cell_num\":18,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  #step = 0.01\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.593Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8446908a645a4cf38454910156569af3\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\n#approx[0] = 0.84740926\n#approx[1] = -1.28941452\napprox[4] = 0\n#\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":6278},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T14:23:31.593Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"error\",\"cell_index\":\"8446908a645a4cf38454910156569af3\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.599Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.613Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.631Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":11,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.664Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.677Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.690Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":11,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.699Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":11,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.704Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.714Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":11,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:31.723Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:32.468Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:32.662Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":13,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:32.777Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":14,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:32.884Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:33.337Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:33.396Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c26934a88a4f445b830db73b6d6ae34a\",\"cell_num\":17,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:33.713Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":17,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1])\nplt.plot(graph_nodes[:,0], graph_nodes[:,-1], "*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid (True)\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":16547}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:34.011Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f3077d5dfa0845a584a09af3170b2bd8\",\"cell_num\":17,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22763}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:34.261Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e52440571a6849d99477855d30f6b913\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:34.559Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c037cca123f0448faab78c1ee67e0fb4\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":21647}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:39.720Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":17,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:39.741Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ca267a7a11e7483485560fa07185369b\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":455}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:39.823Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":18,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:39.959Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.016Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ecca0a7ddf834196b341c7cba2edb9eb\",\"cell_num\":20,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.119Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":20,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.218Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":21,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.308Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9cbabcadb39643d98cba221949567c4d\",\"cell_num\":22,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":16327}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.324Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"create\",\"cell_index\":\"fc48c8a3bba14fe7a2d45533e0bb4a23\",\"cell_num\":22,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.601Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":23,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":27}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:40.882Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":23,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":9755}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:47.959Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"51fad39ea95f4f24801516248af377a3\",\"cell_num\":null,\"cell_source\":\"plt.plot(graph_nodes[:,0], graph_nodes[:,-1],"*")\nplt.xlabel("u")\nplt.ylabel("lambda")\nplt.grid ( True )\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:23:51.914Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"62295a99263a4f49887a8805eebc8394\",\"cell_num\":null,\"cell_source\":\"c1,r1,I,T = [0.47,0.61,0.62,1]\nprint((4*I/c1)**2)\nprint(r1)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:32:05.211Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Hydra_analisys___final__version_ipynb_.ipynb\",\"event\":\"delete\",\"cell_index\":\"d2f175057fe343909dcd3dac2c200b23\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:42:35.296Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"notebook_renamed\",\"cell_index\":\"\",\"cell_num\":4,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:42:53.599Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"from numpy  import*\\nimport matplotlib.pyplot as plt\\nimport matplotlib.font_manager as fm,os\\nimport matplotlib.patches as mpatches\\nimport matplotlib.lines as mlines\\nfrom scipy.integrate import odeint\\nfrom scipy import linalg\\nimport time\\nfrom numpy.linalg import det, inv, svd, norm\\nimport numpy as np\\",\n    \\"execution_count\\": 1,\n    \\"id\\": \\"cfc8fd09989540b6afe9943426e08944\\"\n  },\n  {\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"### The Runge-Kutta numerical integration method.\\",\n    \\"id\\": \\"ce200452a7f8419cbbb8de265376fa18\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\\n    \\\\"\\\\"\\\\"Approximates the solution to a system of first-order ordinary differential equations\\n    using the fourth-order Runge-Kutta method.\\n\\n    Args:\\n        to (float): Initial time.\\n        tEnd (float): Final time.\\n        yo (float): Initial condition for the dependent variable.\\n        tau (float): Step size.\\n        f (function): A function that calculates the derivative of the dependent variable\\n            with respect to time.\\n        p (dict): A dictionary containing any parameters required by the derivative function.\\n\\n    Returns:\\n        array: An array containing the estimated values of the dependent variable at each time step.\\n    \\\\"\\\\"\\\\"\\n\\n    def increment(f, t, y, tau, p):\\n        \\\\"\\\\"\\\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\\n\\n        Returns:\\n            float: The weighted average of the derivatives at each of the intermediate points.\\n        \\\\"\\\\"\\\\"\\n        k1 = tau*f(t,y, p)\\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\\n          \\n        \\n    y = [yo]\\n    while True:\\n        if tau > 0: tau = min(tau, tEnd - to)\\n        else: tau = max(tau, tEnd-to)\\n        to = to + tau\\n        if to == tEnd: break\\n        yo = yo + increment(f, to, yo, tau, p)\\n        y.append(yo)\\n    return array(y)\\",\n    \\"execution_count\\": 2,\n    \\"id\\": \\"eb743a10a9cd42808a989b9526c9c281\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def hydra_function(t, y, lambda_):\\n\\n    f = np.zeros(4)\\n\\n    p_ext = 1.17\\n    V0 = 87\\n\\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n\\n    # The first derivative for the first vessel\\n    f[0] = y[1]                                                 \\n\\n    # The second derivative for the second vessel\\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\\n\\n    # The first derivative for the second vessel\\n    f[2] = y[3]                                          \\n\\n    # The second derivative for the second vessel\\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\\n    return f\\",\n    \\"execution_count\\": 3,\n    \\"id\\": \\"140d60900bb6460e8bee2fab94e39464\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def initial_checker_for_hydra(y_all,lambda_):\\n  left = y_all[0]\\n  right = y_all[-1]\\n  eps1 = 1\\n  eps2 = 0.5\\n  p_k = 0.1\\n  q = 0.1\\n  # eps1 и eps2 - коэффициенты, размера сосуда(чтобы скорость поток считалась одинаково)\\n\\n  residuals = []\\n\\n\\n  #c1,r1,I,T = [0.47,0.61,0.62,1]\\n  #c1,r1,I,T = [3,lambda_,3,1]\\n\\n  p_ext = 1.17\\n  #p_ext = lambda_\\n\\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n  s1 = 0.89\\n  s2 = 0.97\\n\\n  #c2=c1\\n  #r2=r1\\n\\n\\n  # Сохранение масс\\n  residuals.append(2650*right[1] - 3000*left[3])\\n  residuals.append(2650*left[1] - 3000*right[3])\\n\\n  # Бернулли\\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n\\n  # Сохранение масс\\n  #residuals.append(right[1] - left[3])\\n  #residuals.append(left[1] - right[3])\\n\\n  # Бернулли\\n  #residuals.append((right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n  #residuals.append((left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n\\n  return np.array(residuals)\\",\n    \\"execution_count\\": 4,\n    \\"id\\": \\"0df4fdf8f08a4c02bcee16294fc1d50f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = []\\nFrech_dets = []\\neigenvals = []\\",\n    \\"execution_count\\": 5,\n    \\"id\\": \\"77b766f101884ec180eebf8944e1a85f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def drop_parameter(arr, idx):               # временно удаляет один параметр\\n  #return np.concatenate([arr[:idx], arr[idx + 1:]])\\n  return np.delete(arr, idx)\\",\n    \\"execution_count\\": 6,\n    \\"id\\": \\"130771514a1344249c48c7d58ce0cae6\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\\n              func,\\n              left,\\n              right,\\n              step,\\n              bc,\\n              eps=1e-4):\\n  steps = 0\\n  frech_ans = 1e9\\n  while(True):\\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        ys = y\\n        residuals = bc(y,approx[-1])\\n        #print(f"residuals {steps}", residuals)\\n        if (np.abs(residuals) < eps).all():\\n          #print("max", max(residuals))\\n          break\\n        steps += 1\\n        F = np.zeros((len(approx) - 1, len(approx)))\\n        #метод Ньютона\\n        for i in range(len(approx)):\\n            if i == stepping_param_idx:\\n              continue\\n            y_approx = approx.copy()\\n            y_approx[i] += eps\\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\\n            residuals_i = bc(y_i, approx[-1])\\n            \\n            F[:, i] = (residuals_i - residuals) / eps\\n\\n        F = np.delete(F, stepping_param_idx, axis=1)\\n        frech_ans = np.linalg.det(F)              # определитель Фреше\\n\\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\\n            print("определитель матрицы фреше равен 0")\\n            return False, steps, ys, approx, frech_ans\\n\\n        res = np.dot(np.linalg.inv(F), residuals)\\n        res = np.insert(res, stepping_param_idx, 0)\\n        approx = approx - res\\n\\n        #for i in range(len(approx)):\\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\\n\\n        # конец метода Ньютона\\n\\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        \\n  if steps>0:\\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\\n  else:\\n    eigenvals.append(np.zeros(2))    \\n  return True, steps, ys, approx, frech_ans\\",\n    \\"execution_count\\": 7,\n    \\"id\\": \\"b45351a91929461a89693faf58a5fcb7\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  previous_approximation = np.zeros(approx.shape)\\n  last_approximation = np.zeros(approx.shape)\\n  #print("last", last_approximation)\\n  # начальный параметр(например давление) p\\n  \\n  #approx[stepping_param_idx] -= step\\n  steps_streak=0\\n  max_steps_streak=0\\n  is_inf = False\\n  first_step=True \\n  \\n  while abs(step) > 1e-4:\\n\\n    print("step", step)\\n    print("shoot", approx[stepping_param_idx] + step)\\n\\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\\n    approx_try[stepping_param_idx] += step\\n\\n    shoot = shooting(stepping_param_idx, approx = approx_try,\\n                     func = hydra_function, left = 0, right = 1,\\n                     step = 0.01,\\n                     bc = initial_checker_for_hydra)      # метод пристрелки\\n    print(shoot[0], shoot[1], shoot[3], "\\\\n")\\n\\n    #if steps_streak > 20 and step > 5:\\n    #  is_inf = True\\n    #  break\\n\\n    if shoot[0]:    # если не критическая точка\\n      #if shoot[1] < 3 and step < 0.05:\\n      if step < 10:\\n        step *= 1.2\\n\\n      steps_streak += 1\\n      previous_approximation = last_approximation\\n      approx = shoot[3]\\n      graph_nodes.append(approx)\\n      Frech_dets.append(shoot[4])\\n      last_approximation = approx\\n\\n    else:\\n      step /= 2\\n      steps_streak = 0\\n\\n  if not is_inf:\\n    print("предельная точка", approx[stepping_param_idx])\\n\\n  #is_inf - уходим ли мы в бесконечность\\n\\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\\",\n    \\"execution_count\\": 8,\n    \\"id\\": \\"eb8f3417519a40ed944bb9ac3cf6f323\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  # diff - массив разностей параметров на последнем шаге\\n  #print("diff")\\n  #print(stepping_param_idx)\\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\\n  max_idx=0\\n  max1=0\\n  for i in range(len(diff)):\\n    if i != stepping_param_idx and abs(diff[i]) > max1:\\n      max1 = abs(diff[i])\\n      max_idx = i\\n  print("diff", diff)\\n  stepping_param_idx = max_idx\\n  print("new param", stepping_param_idx)\\n  #new_step = sign(diff[max_idx])*0.01\\n\\n  if diff[max_idx] > 0:\\n    new_step = 0.01\\n  else:\\n    new_step = -0.01\\n\\n  print("new_step", new_step)\\n  return stepping_param_idx, new_step\\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\\",\n    \\"execution_count\\": 9,\n    \\"id\\": \\"091ef4a1ed294fbd891bed163ed3c9c9\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def branches_search(stepping_param_idx, approx, step = 0.01):\\n  #step = 0.01\\n  while 1 == 1:\\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\\n    if is_inf:\\n      break\\n    print("Смена параметра")\\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\\n    print("approx", approx)\\n    # branches_search(p, approx) если строим рекурсивно все ветви\\",\n    \\"execution_count\\": 10,\n    \\"id\\": \\"f0fee71a1d3144b98399fef8218caac6\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"approx = np.zeros(5)\\n#approx[0] = 0.84740926\\n#approx[1] = -1.28941452\\napprox[4] = 0\\n#\\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\\n\\nbranches_search(len(approx) - 1, approx, step=0.01)\\",\n    \\"execution_count\\": 11,\n    \\"id\\": \\"c4e01cf8b8994ee3bd432667eddbe45a\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = np.array(graph_nodes)\\",\n    \\"execution_count\\": 12,\n    \\"id\\": \\"fa319a189c24447b8f2ca47e3d1966c9\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.figure(figsize=(8, 6))\\n\\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\\n\\nplt.xlabel("u", fontsize=14)\\nplt.ylabel("lambda", fontsize=14)\\nplt.title("Bifurcation Diagram", fontsize=16)\\n\\nplt.grid(True)\\n\\nplt.show()\\",\n    \\"execution_count\\": 14,\n    \\"id\\": \\"ff5d213b5e4f435e89846ffbce33a1f9\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\\nplt.xlabel("lambda")\\nplt.ylabel("Frech_det")\\",\n    \\"execution_count\\": 15,\n    \\"id\\": \\"5ecd8b97db70417fa7fee29452d2ba9e\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\nplt.plot(graph_nodes[:,0], Frech_dets)\\nplt.xlabel("u")\\nplt.ylabel("Freche det")\\",\n    \\"execution_count\\": 16,\n    \\"id\\": \\"c6a25be33e56411296c54f1259eba117\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets\\",\n    \\"execution_count\\": 17,\n    \\"id\\": \\"5ab896512da84ccf8cb17a0704daae5a\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"eigenvals = np.array(eigenvals)\\",\n    \\"execution_count\\": 18,\n    \\"id\\": \\"85504a89c0bd4561ba1deaed6dea0b71\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\\",\n    \\"execution_count\\": 19,\n    \\"id\\": \\"e9a757ba296c4596a6f994744077f336\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"cd78c5dcd0ab46ad8e82a4a9a4eae4a3\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"05d229918b88480786bf4c57163dc775\\"\n  }\n]\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:43:51.039Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":12,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:43:52.072Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":13,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T14:43:52.110Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":14,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2408}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:00.805Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"54542b14bb7d4ba781fe66a7f3e174a3\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:01.659Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"3787755e493c44a09707b2d15d5316c2\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:01.660Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"3787755e493c44a09707b2d15d5316c2\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:06.896Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"3787755e493c44a09707b2d15d5316c2\",\"cell_num\":14,\"cell_source\":\"Each point on the blue line represents an approximation obtained during the iteration process in the parameter_move function, where the x-coordinate is the value of the u parameter and the y-coordinate is the corresponding value of the lambda parameter. The red asterisks mark the last approximation obtained along the iteration process.\n\nThis plot can help visualize the convergence behavior of the algorithm. If the approximations converge to a fixed point, then the blue line will show a clear pattern of convergence towards that point. \",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:25.870Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"3787755e493c44a09707b2d15d5316c2\",\"cell_num\":14,\"cell_source\":\"Each point on the blue line represents an approximation obtained during the iteration process in the parameter_move function, where the x-coordinate is the value of the u parameter and the y-coordinate is the corresponding value of the lambda parameter. The red asterisks mark the last approximation obtained along the iteration process.\n\nThe approximations converge to a fixed point, so the blue line will show a clear pattern of convergence towards that point. \",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:32.813Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ff5d213b5e4f435e89846ffbce33a1f9\",\"cell_num\":15,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:23:32.967Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ff5d213b5e4f435e89846ffbce33a1f9\",\"cell_num\":16,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":19871}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:24:20.844Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:24:22.991Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [graph_nodes[0, -1], graph_nodes[-1, -1]], "--", color="green", linewidth=2)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:24:23.185Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [graph_nodes[0, -1], graph_nodes[-1, -1]], "--", color="green", linewidth=2)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":28735}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:24:59.638Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\nplt.plot([last_approx[0], last_approx[0]], [graph_nodes[0, -1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.text(last_approx[0]+0.02, last_approx[-1]+0.02, f"({last_approx[0]:.2f}, {last_approx[-1]:.2f})", fontsize=12)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:24:59.825Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\nplt.plot([last_approx[0], last_approx[0]], [graph_nodes[0, -1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.text(last_approx[0]+0.02, last_approx[-1]+0.02, f"({last_approx[0]:.2f}, {last_approx[-1]:.2f})", fontsize=12)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":29067}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:27.607Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\nplt.plot([last_approx[0], last_approx[0]], [graph_nodes[0, -1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:27.750Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\nplt.plot([last_approx[0], last_approx[0]], [graph_nodes[0, -1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22403}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:35.441Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\n#plt.plot([last_approx[0], last_approx[0]], [graph_nodes[0, -1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:35.590Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\n#plt.plot([last_approx[0], last_approx[0]], [graph_nodes[0, -1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20907}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:38.024Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:38.179Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="gray", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20907}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:41.764Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:41.914Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20567}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:45.177Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "-", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:45.329Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "-", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":19999}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:47.456Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "- -", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":17183}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T15:25:47.456Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Illegal format string \\\\"- -\\\\"; two linestyle symbols\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:50.452Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:50.600Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], "*", color="red", markersize=10)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20567}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:25:56.168Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"ff5d213b5e4f435e89846ffbce33a1f9\",\"cell_num\":null,\"cell_source\":\"plt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\nplt.title("Bifurcation Diagram", fontsize=16)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:26:57.277Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:26:57.426Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(8, 6))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":17747}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:27:07.535Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:27:07.690Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20947}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:21.768Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":8,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.838Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":8,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.840Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":8,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.843Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":8,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.845Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":8,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n  left = y_all[0]\n  right = y_all[-1]\n  eps1 = 1\n  eps2 = 0.5\n  p_k = 0.1\n  q = 0.1\n  residuals = []\n\n  p_ext = 1.17\n\n  T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n  s1 = 0.89\n  s2 = 0.97\n\n  # Сохранение масс\n  residuals.append(2650*right[1] - 3000*left[3])\n  residuals.append(2650*left[1] - 3000*right[3])\n\n  # Бернулли\n  residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n  residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n\n  return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.847Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":8,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.850Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":8,\"cell_source\":\"def drop_parameter(arr, idx):             \n  return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.853Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx:\n              continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F)              # определитель Фреше\n\n        if np.linalg.det(F) == 0 or steps >= 100:      # настроил max step 6\n            print("определитель матрицы фреше равен 0")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        #for i in range(len(approx)):\n        #  approx[params_idxs[i]] -= matrix_step[i]            # без цикла возможно  approx[params_idxs] -= matrix_step     , но надо проверить, что данные изменяется approx\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.857Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):                 #добавить параметр step, который будет браться из функции parameter_change (он не обязательно положительный и не обязательно большой)                                         #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  #print("last", last_approximation)\n  # начальный параметр(например давление) p\n  \n  #approx[stepping_param_idx] -= step\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  #пробуем увеличить approx, если Ньютон не сойдется, то вернем обратно\n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)      # метод пристрелки\n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    #if steps_streak > 20 and step > 5:\n    #  is_inf = True\n    #  break\n\n    if shoot[0]:    # если не критическая точка\n      #if shoot[1] < 3 and step < 0.05:\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  #is_inf - уходим ли мы в бесконечность\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.858Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":8,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - массив разностей параметров на последнем шаге\n  #print("diff")\n  #print(stepping_param_idx)\n    #max_idx = np.argmax(drop_parameter(diff, stepping_param_idx))\n  max_idx=0\n  max1=0\n  for i in range(len(diff)):\n    if i != stepping_param_idx and abs(diff[i]) > max1:\n      max1 = abs(diff[i])\n      max_idx = i\n  print("diff", diff)\n  stepping_param_idx = max_idx\n  print("new param", stepping_param_idx)\n  #new_step = sign(diff[max_idx])*0.01\n\n  if diff[max_idx] > 0:\n    new_step = 0.01\n  else:\n    new_step = -0.01\n\n  print("new_step", new_step)\n  return stepping_param_idx, new_step\n  # выбирать максимальны быстрорастущий, если хотим просто строить, или выбирать все по очереди, если хотим построить все ветви (рекурсия)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:28:23.861Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":8,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n  #step = 0.01\n  while 1 == 1:\n    stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n    if is_inf:\n      break\n    print("Смена параметра")\n    stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n    print("approx", approx)\n    # branches_search(p, approx) если строим рекурсивно все ветви\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.849Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\n#approx[0] = 0.84740926\n#approx[1] = -1.28941452\napprox[4] = 0\n#\n#approx = np.array([ 0.00404436 + 0.003, -0.00035001,  0.01207775,  0.00063613,  0.022])\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":7787},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T15:32:40.849Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.853Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.856Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":11,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.866Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":11,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.876Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.888Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.894Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":11,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.900Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":11,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:40.907Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:42.357Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:42.381Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:43.559Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":13,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:43.582Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":14,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2616}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:44.708Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:44.885Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":18743}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:46.930Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:47.065Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[35:,-1], Frech_dets[35:])\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:47.184Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:47.477Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":21819}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:47.955Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:47.975Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":19,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":497}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:48.833Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":19,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:48.853Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":20,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:49.489Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:49.636Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":21,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":16467}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:54.331Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"cd78c5dcd0ab46ad8e82a4a9a4eae4a3\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:54.758Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"05d229918b88480786bf4c57163dc775\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:32:59.782Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"ff06819b263a41e2bcc76284a786f905\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:35:14.313Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"2bf3ebcde07742f69a74a3e25093d806\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:36:59.871Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"2bf3ebcde07742f69a74a3e25093d806\",\"cell_num\":15,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:36:59.894Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2bf3ebcde07742f69a74a3e25093d806\",\"cell_num\":16,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":497}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:37:10.357Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:37:10.533Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":21175}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:37:13.278Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"5956a395c1e84d10b308980f88a5431f\",\"cell_num\":15,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:37:20.574Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5956a395c1e84d10b308980f88a5431f\",\"cell_num\":16,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:37:20.598Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5956a395c1e84d10b308980f88a5431f\",\"cell_num\":17,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2616}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:37:23.095Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"2bf3ebcde07742f69a74a3e25093d806\",\"cell_num\":null,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:39:35.192Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[1], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":4791}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T15:39:35.192Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"x and y must have same first dimension, but have shapes (5,) and (25,)\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:39:38.182Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:39:38.349Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":21175}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:47:03.199Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"5956a395c1e84d10b308980f88a5431f\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:22.034Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":7,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.654Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":7,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.656Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":7,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.657Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":7,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.659Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":7,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.663Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.665Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.667Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:28.669Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":7,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.535Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":19,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T15:51:30.535Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":19,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"SyntaxError\\",\\"evalue\\":\\"invalid syntax (<ipython-input-9-e8b18fde0b7c>, line 15)\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.547Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":19,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.568Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":19,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.584Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":19,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.601Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":19,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.616Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.624Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.634Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":19,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.645Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":19,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:51:30.655Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:52:55.414Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:52:55.444Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:52:56.936Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:52:56.968Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.548Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":11,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":8673},{\\"output_type\\":\\"stream\\",\\"size\\":397},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T15:57:13.548Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.551Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":11,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.562Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":11,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.579Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.583Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":11,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.589Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":11,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.596Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":11,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:13.602Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":11,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:15.421Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:15.446Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:16.373Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":14,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:16.545Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":18743}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:19.178Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":15,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:19.339Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":21175}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:20.653Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:20.805Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":21819}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:21.799Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":17,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:21.820Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":497}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:22.356Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":18,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:22.375Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":19,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:23.255Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":19,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:23.262Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"15a68349b05d4a28b9577b78a458156a\",\"cell_num\":19,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:23.423Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":16467}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:57:45.375Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"33bbe2cf658e486d866032143d66d0b5\",\"cell_num\":10,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:07.607Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":10,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.590Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":10,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.592Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":10,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.594Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":10,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.597Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":10,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.600Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":10,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.602Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":10,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.603Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":10,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.607Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":10,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.608Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.612Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":10,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step = 0.01):\n#    while 1 == 1:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if is_inf: break\n#        print("Parameter change")\n#        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T15:59:08.613Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"33bbe2cf658e486d866032143d66d0b5\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    done = False\n    while not done:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if not is_inf:\n            print("Parameter change")\n            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n            print("approx:", approx)\n        else:\n            done = True\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.780Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":21,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1679},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:00:16.780Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":21,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.783Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":21,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.790Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":21,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.793Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":21,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.797Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":21,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.812Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":21,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.818Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":21,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:16.824Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":21,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:18.999Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:19.017Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:19.623Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:19.810Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22999}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:39.641Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":99},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:00:39.641Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "append"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:43.548Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.028Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":13,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.030Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":13,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.033Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":13,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.035Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":13,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.038Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":13,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.041Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":13,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.044Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":13,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.047Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":13,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.049Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":13,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.052Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":13,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step = 0.01):\n#    while 1 == 1:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if is_inf: break\n#        print("Parameter change")\n#        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:00:45.054Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"33bbe2cf658e486d866032143d66d0b5\",\"cell_num\":13,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    done = False\n    while not done:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if not is_inf:\n            print("Parameter change")\n            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n            print("approx:", approx)\n        else:\n            done = True\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.358Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":8675},{\\"output_type\\":\\"stream\\",\\"size\\":8578},{\\"output_type\\":\\"stream\\",\\"size\\":8558},{\\"output_type\\":\\"stream\\",\\"size\\":8567},{\\"output_type\\":\\"stream\\",\\"size\\":1741},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:10:19.358Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.363Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.367Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":12,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.378Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.381Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.393Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":12,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.399Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":12,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:19.406Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":12,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:22.612Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np}.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:10:22.612Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":14,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"SyntaxError\\",\\"evalue\\":\\"unmatched "}" (<ipython-input-13-c21f9cd84d81>, line 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:25.069Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:25.088Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:25.653Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:25.808Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20191}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:33.356Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"6b29199eae104ad6b4fe3a75ce0d0c84\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:37.884Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"6b29199eae104ad6b4fe3a75ce0d0c84\",\"cell_num\":15,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:37.912Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"6b29199eae104ad6b4fe3a75ce0d0c84\",\"cell_num\":16,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":18216}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:40.832Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"6b29199eae104ad6b4fe3a75ce0d0c84\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:45.172Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:45.318Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":8007}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:46.616Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:46.770Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":7403}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:49.087Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:49.110Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":19,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":3343}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:49.306Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":19,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:49.383Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":20,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:49.881Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:10:50.018Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":21,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":8671}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:09.048Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:11:09.048Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "append"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:40.891Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":7,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.377Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":7,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.379Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":7,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.381Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":7,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.384Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":7,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.385Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.388Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.393Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 25:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.394Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":7,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.397Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":7,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.401Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":7,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step = 0.01):\n#    while 1 == 1:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if is_inf: break\n#        print("Parameter change")\n#        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:11:42.403Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"33bbe2cf658e486d866032143d66d0b5\",\"cell_num\":7,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step=0.01):\n    done = False\n    while not done:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if not is_inf:\n            print("Parameter change")\n            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n            print("approx:", approx)\n        else:\n            done = True\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.546Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1507},{\\"output_type\\":\\"stream\\",\\"size\\":1971},{\\"output_type\\":\\"stream\\",\\"size\\":5908},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:12:49.546Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.550Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.557Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":12,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.562Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.580Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.587Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":12,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.593Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":12,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:49.598Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":12,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:51.497Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:51.515Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:51.858Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:12:51.858Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"IndexError\\",\\"evalue\\":\\"index -1 is out of bounds for axis 0 with size 0\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:52.334Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:12:52.477Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":6659}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:00.504Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"947862bd5edd4f8c8407dd4d337b6933\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:01.509Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"947862bd5edd4f8c8407dd4d337b6933\",\"cell_num\":14,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:01.526Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"947862bd5edd4f8c8407dd4d337b6933\",\"cell_num\":15,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":41}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:04.259Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"947862bd5edd4f8c8407dd4d337b6933\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:40.708Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":7,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.691Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":7,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.693Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":7,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.694Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":7,\"cell_source\":\"def hydra_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.696Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":7,\"cell_source\":\"def initial_checker_for_hydra(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.699Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.702Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.704Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.707Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":7,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = hydra_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_hydra)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.709Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":7,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.711Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":7,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:13:41.714Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"33bbe2cf658e486d866032143d66d0b5\",\"cell_num\":7,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.823Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":5041},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:16:05.823Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.827Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.837Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":12,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.842Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.865Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.874Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":12,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.879Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":12,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:05.886Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":12,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:06.857Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:07.181Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:07.196Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":15,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:07.630Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":16,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20223}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:07.877Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":16,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:08.063Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":20903}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:09.327Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":17,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:09.473Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":43},{\\"output_type\\":\\"display_data\\",\\"size\\":20459}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:10.080Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:10.101Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":19,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":396}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:12.680Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":19,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:12.709Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":20,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:12.903Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":20,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:16:13.097Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":21,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":20627}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:18.390Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"889cc87700f44067876a4a1e5a31acfc\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:19.510Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4e85a6c4c70941558c37d039afd9f125\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:19.510Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"4e85a6c4c70941558c37d039afd9f125\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:22.977Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4e85a6c4c70941558c37d039afd9f125\",\"cell_num\":14,\"cell_source\":\"# Plots\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:33.003Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"3787755e493c44a09707b2d15d5316c2\",\"cell_num\":15,\"cell_source\":\"Each point on the blue line represents an approximation obtained during the iteration process in the parameter_move function, where the x-coordinate is the value of the u parameter and the y-coordinate is the corresponding value of the lambda parameter.\n\nThe approximations converge to a fixed point, so the blue line will show a clear pattern of convergence towards that point. \",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:41.057Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"9c7778e77c87476482e89ffaf8925eb6\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:42.300Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"9c7778e77c87476482e89ffaf8925eb6\",\"cell_num\":14,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:42.317Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9c7778e77c87476482e89ffaf8925eb6\",\"cell_num\":15,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2096}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:22:45.204Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"9c7778e77c87476482e89ffaf8925eb6\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:42:39.867Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4e85a6c4c70941558c37d039afd9f125\",\"cell_num\":14,\"cell_source\":\"# Plots\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:06.578Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":16,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:14.134Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 1], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:14.336Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":18,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 1], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":14699}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:18.654Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 2], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:18.861Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":18,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 2], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":19291}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:20.675Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 3], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:20.885Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":18,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 3], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":18831}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:24.208Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 4], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:24.422Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":18,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 4], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22399}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:28.970Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"5882fa29b9804c7c897d28e99e08b136\",\"cell_num\":null,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 4], graph_nodes[:, -1], color="blue", linewidth=2)\n\n#plt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:35.320Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"c4f47191ab4b4ae58c78452f547513c6\",\"cell_num\":16,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:57.475Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"c4f47191ab4b4ae58c78452f547513c6\",\"cell_num\":17,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:43:57.504Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4f47191ab4b4ae58c78452f547513c6\",\"cell_num\":18,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2096}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:47:04.848Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"f04064c3ba034f1abcd7272b577f8e5e\",\"cell_num\":16,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:47:14.197Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f04064c3ba034f1abcd7272b577f8e5e\",\"cell_num\":18,\"cell_source\":\"# iterate over each element in the array\nfor i in range(array.shape[1]-1):\n    # extract the x and y values for the ith and i+1th points in each list\n    x_vals = graph_nodes[:,i]\n    y_vals = graph_nodes[:,i+1]\n    # plot the line defined by these two points\n    plt.plot(x_vals, y_vals)\n\n# add axis labels and a title\nplt.xlabel("X values")\nplt.ylabel("Y values")\nplt.title("Lines defined by points in array")\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:47:14.197Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"f04064c3ba034f1abcd7272b577f8e5e\",\"cell_num\":18,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""builtin_function_or_method" object has no attribute "shape"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:47:21.501Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f04064c3ba034f1abcd7272b577f8e5e\",\"cell_num\":17,\"cell_source\":\"# iterate over each element in the array\nfor i in range(graph_nodes.shape[1]-1):\n    # extract the x and y values for the ith and i+1th points in each list\n    x_vals = graph_nodes[:,i]\n    y_vals = graph_nodes[:,i+1]\n    # plot the line defined by these two points\n    plt.plot(x_vals, y_vals)\n\n# add axis labels and a title\nplt.xlabel("X values")\nplt.ylabel("Y values")\nplt.title("Lines defined by points in array")\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:47:21.740Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f04064c3ba034f1abcd7272b577f8e5e\",\"cell_num\":18,\"cell_source\":\"# iterate over each element in the array\nfor i in range(graph_nodes.shape[1]-1):\n    # extract the x and y values for the ith and i+1th points in each list\n    x_vals = graph_nodes[:,i]\n    y_vals = graph_nodes[:,i+1]\n    # plot the line defined by these two points\n    plt.plot(x_vals, y_vals)\n\n# add axis labels and a title\nplt.xlabel("X values")\nplt.ylabel("Y values")\nplt.title("Lines defined by points in array")\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":12799}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:47:40.588Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"f04064c3ba034f1abcd7272b577f8e5e\",\"cell_num\":null,\"cell_source\":\"# iterate over each element in the array\nfor i in range(graph_nodes.shape[1]-1):\n    # extract the x and y values for the ith and i+1th points in each list\n    x_vals = graph_nodes[:,i]\n    y_vals = graph_nodes[:,i+1]\n    # plot the line defined by these two points\n    plt.plot(x_vals, y_vals)\n\n# add axis labels and a title\nplt.xlabel("X values")\nplt.ylabel("Y values")\nplt.title("Lines defined by points in array")\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:03.038Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"c4f47191ab4b4ae58c78452f547513c6\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:06.424Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":16,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:07.180Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":17,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:07.206Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":18,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":396}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:13.708Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:13.922Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes, Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":20903}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:28.698Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":18,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 0], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:28.887Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 0], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":20943}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:36.401Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":17,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:40.314Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":18,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:40.339Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":19,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2096}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:43.811Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":17,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:43.838Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":18,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:47.489Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":18,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:47.518Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":19,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:56.956Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 1], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:48:57.165Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 1], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":18147}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:00.172Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 2], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:00.374Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 2], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":22451}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:01.974Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 3], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:02.181Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 3], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":25159}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:05.021Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 4], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:05.230Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 4], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":14651}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:28.047Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"c6a25be33e56411296c54f1259eba117\",\"cell_num\":null,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:,0], Frech_dets)\nplt.xlabel("u")\nplt.ylabel("Freche det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:28.724Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"5ab896512da84ccf8cb17a0704daae5a\",\"cell_num\":null,\"cell_source\":\"Frech_dets\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:32.769Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":18,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:35.064Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 0], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:35.252Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 0], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":42},{\\"output_type\\":\\"display_data\\",\\"size\\":20943}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:43.615Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"963639cd351f4572950261af78b8b38e\",\"cell_num\":18,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:44.746Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"963639cd351f4572950261af78b8b38e\",\"cell_num\":19,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:49:44.773Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"963639cd351f4572950261af78b8b38e\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:51:30.102Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":19,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:51:31.659Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":20,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(graph_nodes[:, 0], Frech_dets)\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:51:32.265Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(graph_nodes[:, 0], Frech_dets)\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":74307}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:53:21.828Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":21,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Sort the data points based on the x-values\nsorted_indices = np.argsort(graph_nodes[:, 1])\nsorted_nodes = graph_nodes[sorted_indices]\nsorted_dets = Frech_dets[sorted_indices]\n\n# Plot the sorted data\nplt.plot(sorted_nodes[:, 1], sorted_dets)\nplt.xlabel("Graph Nodes")\nplt.ylabel("French Dets")\nplt.title("My Plot")\n\n# Display the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:53:22.023Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":22,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Sort the data points based on the x-values\nsorted_indices = np.argsort(graph_nodes[:, 1])\nsorted_nodes = graph_nodes[sorted_indices]\nsorted_dets = Frech_dets[sorted_indices]\n\n# Plot the sorted data\nplt.plot(sorted_nodes[:, 1], sorted_dets)\nplt.xlabel("Graph Nodes")\nplt.ylabel("French Dets")\nplt.title("My Plot")\n\n# Display the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":19343}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:54:39.705Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":21,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Sort the data points based on the x-values\nsorted_indices = np.argsort(graph_nodes, axis=0)\nsorted_nodes = graph_nodes[sorted_indices]\nsorted_dets = Frech_dets[sorted_indices]\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(sorted_nodes[:, 1], sorted_dets)\naxs[0, 0].set_xlabel("Graph Nodes")\naxs[0, 0].set_ylabel("French Dets")\naxs[0, 0].set_title("Subplot 1")\n\n# Plot the second subplot\naxs[0, 1].plot(sorted_nodes[:, 0], sorted_dets)\naxs[0, 1].set_xlabel("Graph Nodes")\naxs[0, 1].set_ylabel("French Dets")\naxs[0, 1].set_title("Subplot 2")\n\n# Plot the third subplot\naxs[1, 0].plot(sorted_nodes[:, 2], sorted_dets)\naxs[1, 0].set_xlabel("Graph Nodes")\naxs[1, 0].set_ylabel("French Dets")\naxs[1, 0].set_title("Subplot 3")\n\n# Plot the fourth subplot\naxs[1, 1].plot(sorted_nodes[:, 3], sorted_dets)\naxs[1, 1].set_xlabel("Graph Nodes")\naxs[1, 1].set_ylabel("French Dets")\naxs[1, 1].set_title("Subplot 4")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:54:40.382Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":22,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Sort the data points based on the x-values\nsorted_indices = np.argsort(graph_nodes, axis=0)\nsorted_nodes = graph_nodes[sorted_indices]\nsorted_dets = Frech_dets[sorted_indices]\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(sorted_nodes[:, 1], sorted_dets)\naxs[0, 0].set_xlabel("Graph Nodes")\naxs[0, 0].set_ylabel("French Dets")\naxs[0, 0].set_title("Subplot 1")\n\n# Plot the second subplot\naxs[0, 1].plot(sorted_nodes[:, 0], sorted_dets)\naxs[0, 1].set_xlabel("Graph Nodes")\naxs[0, 1].set_ylabel("French Dets")\naxs[0, 1].set_title("Subplot 2")\n\n# Plot the third subplot\naxs[1, 0].plot(sorted_nodes[:, 2], sorted_dets)\naxs[1, 0].set_xlabel("Graph Nodes")\naxs[1, 0].set_ylabel("French Dets")\naxs[1, 0].set_title("Subplot 3")\n\n# Plot the fourth subplot\naxs[1, 1].plot(sorted_nodes[:, 3], sorted_dets)\naxs[1, 1].set_xlabel("Graph Nodes")\naxs[1, 1].set_ylabel("French Dets")\naxs[1, 1].set_title("Subplot 4")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":85671}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:55:13.218Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"5774e27b99334df3b342bf2996c57fa3\",\"cell_num\":null,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Sort the data points based on the x-values\nsorted_indices = np.argsort(graph_nodes, axis=0)\nsorted_nodes = graph_nodes[sorted_indices]\nsorted_dets = Frech_dets[sorted_indices]\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(sorted_nodes[:, 1], sorted_dets)\naxs[0, 0].set_xlabel("Graph Nodes")\naxs[0, 0].set_ylabel("French Dets")\naxs[0, 0].set_title("Subplot 1")\n\n# Plot the second subplot\naxs[0, 1].plot(sorted_nodes[:, 0], sorted_dets)\naxs[0, 1].set_xlabel("Graph Nodes")\naxs[0, 1].set_ylabel("French Dets")\naxs[0, 1].set_title("Subplot 2")\n\n# Plot the third subplot\naxs[1, 0].plot(sorted_nodes[:, 2], sorted_dets)\naxs[1, 0].set_xlabel("Graph Nodes")\naxs[1, 0].set_ylabel("French Dets")\naxs[1, 0].set_title("Subplot 3")\n\n# Plot the fourth subplot\naxs[1, 1].plot(sorted_nodes[:, 3], sorted_dets)\naxs[1, 1].set_xlabel("Graph Nodes")\naxs[1, 1].set_ylabel("French Dets")\naxs[1, 1].set_title("Subplot 4")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:55:15.501Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"5ecd8b97db70417fa7fee29452d2ba9e\",\"cell_num\":null,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\nplt.plot(graph_nodes[:, 4], Frech_dets)\nplt.xlabel("lambda")\nplt.ylabel("Frech_det")\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:55:43.605Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":20,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(np.argsort(graph_nodes[:, 0]), Frech_dets)\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:55:44.198Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(np.argsort(graph_nodes[:, 0]), Frech_dets)\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":74511}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:55:56.616Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(np.argsort(graph_nodes[:, 0][:, 1]), Frech_dets)\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":27471}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T16:55:56.616Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"IndexError\\",\\"evalue\\":\\"too many indices for array: array is 1-dimensional, but 2 were indexed\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:57:00.473Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":20,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:57:01.056Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":69643}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:57:10.182Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":20,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:57:10.760Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# Create the figure and the subplots\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(graph_nodes[:, 1], Frech_dets)\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the second subplot\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\n# Plot the third subplot\naxs[1, 0].plot(graph_nodes[:, 2], Frech_dets)\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\n# Plot the fourth subplot\naxs[1, 1].plot(graph_nodes[:, 3], Frech_dets)\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\n# Add a global title to the figure\nfig.suptitle("My Subplots")\n\n# Display the figure\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":73011}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:21.891Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":20,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:22.588Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":61551}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:35.000Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"a6133f7c4b604a3688a5b8e2811b7db6\",\"cell_num\":21,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:38.729Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a6133f7c4b604a3688a5b8e2811b7db6\",\"cell_num\":22,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:38.756Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a6133f7c4b604a3688a5b8e2811b7db6\",\"cell_num\":23,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:40.712Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"a6133f7c4b604a3688a5b8e2811b7db6\",\"cell_num\":null,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:43.276Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":21,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:44.933Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":22,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T16:58:44.961Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":23,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1456}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:04:42.706Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":21,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:07:17.870Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":22,\"cell_source\":\"graph_nodes[:,0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:07:17.896Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":23,\"cell_source\":\"graph_nodes[:,0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":288}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:07:52.260Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:07:58.997Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nreal = [0.00155993, 0.00256321, 0.00396598, 0.00456234, 0.00587921]\nimaginary = [-40.64027406 +119.41960482j, 50.32154211 -90.21098764j, 80.12345678 +10.98765432j, 30.09876543 -40.56789012j, -60.12345678 +70.98765432j]\n\n# Extract the real and imaginary parts of the complex numbers in the imaginary array\nimaginary_real = [z.real for z in imaginary]\nimaginary_imag = [z.imag for z in imaginary]\n\n# Create a scatter plot of the real and imaginary numbers\nplt.scatter(real, imaginary_real, label="Real")\nplt.scatter(real, imaginary_imag, label="Imaginary")\n\n# Add labels and a legend to the plot\nplt.xlabel("Real")\nplt.ylabel("Imaginary")\nplt.legend()\n\n# Show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:07:59.227Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nreal = [0.00155993, 0.00256321, 0.00396598, 0.00456234, 0.00587921]\nimaginary = [-40.64027406 +119.41960482j, 50.32154211 -90.21098764j, 80.12345678 +10.98765432j, 30.09876543 -40.56789012j, -60.12345678 +70.98765432j]\n\n# Extract the real and imaginary parts of the complex numbers in the imaginary array\nimaginary_real = [z.real for z in imaginary]\nimaginary_imag = [z.imag for z in imaginary]\n\n# Create a scatter plot of the real and imaginary numbers\nplt.scatter(real, imaginary_real, label="Real")\nplt.scatter(real, imaginary_imag, label="Imaginary")\n\n# Add labels and a legend to the plot\nplt.xlabel("Real")\nplt.ylabel("Imaginary")\nplt.legend()\n\n# Show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":9311}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:13.773Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nreal = graph_nodes[:,0]\nimaginary = eigenvals\n\n# Extract the real and imaginary parts of the complex numbers in the imaginary array\nimaginary_real = [z.real for z in imaginary]\nimaginary_imag = [z.imag for z in imaginary]\n\n# Create a scatter plot of the real and imaginary numbers\nplt.scatter(real, imaginary_real, label="Real")\nplt.scatter(real, imaginary_imag, label="Imaginary")\n\n# Add labels and a legend to the plot\nplt.xlabel("Real")\nplt.ylabel("Imaginary")\nplt.legend()\n\n# Show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":4791}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T17:08:13.773Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":25,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"x and y must be the same size\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:26.525Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":22,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:26.552Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":23,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:30.755Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":23,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:30.790Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":24,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:38.889Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:40.615Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":24,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:40.648Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":839}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:44.296Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":24,\"cell_source\":\"len(imaginary_real)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:08:44.329Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"len(imaginary_real)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:01.053Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":24,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:01.087Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":839}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:03.124Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"5782a0b58a584c9b8ee8184c1cc110d9\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:07.230Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5782a0b58a584c9b8ee8184c1cc110d9\",\"cell_num\":24,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:07.255Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5782a0b58a584c9b8ee8184c1cc110d9\",\"cell_num\":25,\"cell_source\":\"eigenvals\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1456}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:26.714Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"5782a0b58a584c9b8ee8184c1cc110d9\",\"cell_num\":24,\"cell_source\":\"graph_nodes[:,0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:26.742Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5782a0b58a584c9b8ee8184c1cc110d9\",\"cell_num\":25,\"cell_source\":\"graph_nodes[:,0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":288}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:29.364Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real[:,0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T17:09:29.364Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:35.257Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:35.288Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":839}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:38.041Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real*\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T17:09:38.041Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"SyntaxError\\",\\"evalue\\":\\"invalid syntax (<ipython-input-62-49c599e1c9e5>, line 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:39.027Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:39.060Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":839}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:41.904Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real[1]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:41.953Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real[1]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":52}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:45.252Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real[:]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:45.287Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real[:]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":839}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:47.270Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":25,\"cell_source\":\"imaginary_real[:1]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:47.303Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":26,\"cell_source\":\"imaginary_real[:1]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":54}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:52.106Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"5782a0b58a584c9b8ee8184c1cc110d9\",\"cell_num\":null,\"cell_source\":\"graph_nodes[:,0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:09:52.316Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"50fc913820b945e78344435dd5d12017\",\"cell_num\":null,\"cell_source\":\"imaginar\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:15:30.847Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"d60f7e43c49e48d69922b9a3bb1bb9d0\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:15:32.358Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d60f7e43c49e48d69922b9a3bb1bb9d0\",\"cell_num\":14,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# create a figure and axis object\nfig, ax = plt.subplots()\n\n# plot the first column of the graph_nodes array against the second column\nx = graph_nodes[:, 0]\ny = graph_nodes[:, 1]\nax.plot(x, y)\n\n# set axis labels and title\nax.set_xlabel("x")\nax.set_ylabel("y")\nax.set_title("Graph Nodes")\n\n# show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:15:32.527Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d60f7e43c49e48d69922b9a3bb1bb9d0\",\"cell_num\":15,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# create a figure and axis object\nfig, ax = plt.subplots()\n\n# plot the first column of the graph_nodes array against the second column\nx = graph_nodes[:, 0]\ny = graph_nodes[:, 1]\nax.plot(x, y)\n\n# set axis labels and title\nax.set_xlabel("x")\nax.set_ylabel("y")\nax.set_title("Graph Nodes")\n\n# show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":14527}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:15:39.328Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"d60f7e43c49e48d69922b9a3bb1bb9d0\",\"cell_num\":null,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# create a figure and axis object\nfig, ax = plt.subplots()\n\n# plot the first column of the graph_nodes array against the second column\nx = graph_nodes[:, 0]\ny = graph_nodes[:, 1]\nax.plot(x, y)\n\n# set axis labels and title\nax.set_xlabel("x")\nax.set_ylabel("y")\nax.set_title("Graph Nodes")\n\n# show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:16:10.534Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":13,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:16:15.410Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":14,\"cell_source\":\"graph_nodes[:, 0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:16:15.429Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":15,\"cell_source\":\"graph_nodes[:, 0]\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":288}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:16:54.029Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":14,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:16:54.055Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":15,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2096}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:17:36.125Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":14,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate example data\ngraph_nodes = np.random.rand(10, 5)\n\n# Create plot\nfig, ax = plt.subplots()\n\n# Plot the 5 lines\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n# Set plot title and axis labels\nax.set_title("Five lines from graph_nodes[:, 0] to graph_nodes[:, 4]")\nax.set_xlabel("X axis label")\nax.set_ylabel("Y axis label")\n\n# Show plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:17:36.318Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":15,\"cell_source\":\"import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate example data\ngraph_nodes = np.random.rand(10, 5)\n\n# Create plot\nfig, ax = plt.subplots()\n\n# Plot the 5 lines\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n# Set plot title and axis labels\nax.set_title("Five lines from graph_nodes[:, 0] to graph_nodes[:, 4]")\nax.set_xlabel("X axis label")\nax.set_ylabel("Y axis label")\n\n# Show plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":57283}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:22.409Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":15,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.510Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cfc8fd09989540b6afe9943426e08944\",\"cell_num\":3,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.514Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb743a10a9cd42808a989b9526c9c281\",\"cell_num\":3,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.517Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"140d60900bb6460e8bee2fab94e39464\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.519Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"0df4fdf8f08a4c02bcee16294fc1d50f\",\"cell_num\":3,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.522Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"77b766f101884ec180eebf8944e1a85f\",\"cell_num\":3,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.525Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"130771514a1344249c48c7d58ce0cae6\",\"cell_num\":3,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.528Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b45351a91929461a89693faf58a5fcb7\",\"cell_num\":3,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.534Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"eb8f3417519a40ed944bb9ac3cf6f323\",\"cell_num\":3,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.538Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"091ef4a1ed294fbd891bed163ed3c9c9\",\"cell_num\":3,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.541Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f0fee71a1d3144b98399fef8218caac6\",\"cell_num\":3,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:18:24.543Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"33bbe2cf658e486d866032143d66d0b5\",\"cell_num\":3,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.279Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.01)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":5251},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T17:21:50.279Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"c4e01cf8b8994ee3bd432667eddbe45a\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.285Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":12,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.291Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":12,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.316Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":12,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.338Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":12,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.352Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":12,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.365Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"963639cd351f4572950261af78b8b38e\",\"cell_num\":12,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.373Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":12,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.381Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":12,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.390Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":12,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.400Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":12,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.408Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":12,\"cell_source\":\"import matplotlib.pyplot as plt\n\nreal = graph_nodes[:,0]\nimaginary = eigenvals\n\n# Extract the real and imaginary parts of the complex numbers in the imaginary array\nimaginary_real = [z.real for z in imaginary]\nimaginary_imag = [z.imag for z in imaginary]\n\n# Create a scatter plot of the real and imaginary numbers\nplt.scatter(real, imaginary_real, label="Real")\nplt.scatter(real, imaginary_imag, label="Imaginary")\n\n# Add labels and a legend to the plot\nplt.xlabel("Real")\nplt.ylabel("Imaginary")\nplt.legend()\n\n# Show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:50.423Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e9a757ba296c4596a6f994744077f336\",\"cell_num\":12,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:52.971Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:52.988Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fa319a189c24447b8f2ca47e3d1966c9\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:57.354Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":15,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:21:57.577Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":16,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":16383}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:07.704Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":17,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:07.907Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1f4de79aba7f472b893de0df9137a89e\",\"cell_num\":18,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":20223}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:11.194Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":18,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:11.219Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d95d08d971e144b69485626454502921\",\"cell_num\":19,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:11.594Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":19,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:11.618Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"cda5a443f8554da3af98e3cbd6ed7639\",\"cell_num\":20,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:11.983Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"963639cd351f4572950261af78b8b38e\",\"cell_num\":20,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:12.013Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"963639cd351f4572950261af78b8b38e\",\"cell_num\":21,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:12.595Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":21,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:13.074Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":22,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:13.185Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a86fad7528ce4b28a96d55a1ff91b756\",\"cell_num\":23,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":61551}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:13.325Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"85504a89c0bd4561ba1deaed6dea0b71\",\"cell_num\":23,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:13.554Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":23,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:13.747Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"64cda7491bcd4ab3afcc4e374fd2291d\",\"cell_num\":24,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:14.121Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":24,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:14.152Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2ab4cf10df5144be803cacc01664f9b9\",\"cell_num\":25,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:15.082Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":26,\"cell_source\":\"import matplotlib.pyplot as plt\n\nreal = graph_nodes[:,0]\nimaginary = eigenvals\n\n# Extract the real and imaginary parts of the complex numbers in the imaginary array\nimaginary_real = [z.real for z in imaginary]\nimaginary_imag = [z.imag for z in imaginary]\n\n# Create a scatter plot of the real and imaginary numbers\nplt.scatter(real, imaginary_real, label="Real")\nplt.scatter(real, imaginary_imag, label="Imaginary")\n\n# Add labels and a legend to the plot\nplt.xlabel("Real")\nplt.ylabel("Imaginary")\nplt.legend()\n\n# Show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":4791}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-11T17:22:15.082Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":26,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"x and y must be the same size\\"}\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:22.249Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"f7086feab03d41cd8233fb53dda6a01b\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:22.680Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"0affff644e7245e6979f82da2d70ecf3\",\"cell_num\":24,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:40.493Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"f7086feab03d41cd8233fb53dda6a01b\",\"cell_num\":null,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# create a figure and axis object\nfig, ax = plt.subplots()\n\n# plot the first column of the graph_nodes array against the second column\nx = graph_nodes[:, 0]\ny = graph_nodes[:, 1]\nax.plot(x, y)\n\n# set axis labels and title\nax.set_xlabel("x")\nax.set_ylabel("y")\nax.set_title("Graph Nodes")\n\n# show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:42.946Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"0affff644e7245e6979f82da2d70ecf3\",\"cell_num\":null,\"cell_source\":\"import matplotlib.pyplot as plt\n\n# create a figure and axis object\nfig, ax = plt.subplots()\n\n# plot the first column of the graph_nodes array against the second column\nx = graph_nodes[:, 0]\ny = graph_nodes[:, 1]\nax.plot(x, y)\n\n# set axis labels and title\nax.set_xlabel("x")\nax.set_ylabel("y")\nax.set_title("Graph Nodes")\n\n# show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:22:46.419Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"e2e92d734796445fbe19b9dc72c42813\",\"cell_num\":null,\"cell_source\":\"import matplotlib.pyplot as plt\n\nreal = graph_nodes[:,0]\nimaginary = eigenvals\n\n# Extract the real and imaginary parts of the complex numbers in the imaginary array\nimaginary_real = [z.real for z in imaginary]\nimaginary_imag = [z.imag for z in imaginary]\n\n# Create a scatter plot of the real and imaginary numbers\nplt.scatter(real, imaginary_real, label="Real")\nplt.scatter(real, imaginary_imag, label="Imaginary")\n\n# Add labels and a legend to the plot\nplt.xlabel("Real")\nplt.ylabel("Imaginary")\nplt.legend()\n\n# Show the plot\nplt.show()\n\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:23:38.534Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":15,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:23:38.735Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d17989f976d24bc3bc6e741a3eb66d0c\",\"cell_num\":16,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":17955}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:54:07.419Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"be4460ea14a74c03bc135762d5eef24e\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:54:09.305Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4304bc1768cf4219bd1747c904a8c46b\",\"cell_num\":15,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:54:09.306Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"4304bc1768cf4219bd1747c904a8c46b\",\"cell_num\":15,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:54:10.513Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4304bc1768cf4219bd1747c904a8c46b\",\"cell_num\":15,\"cell_source\":\"graph_nodes — это список, в котором хранятся вычисленные аппроксимации решения на каждом шаге метода стрельбы при поиске разных ветвей решений. Каждый элемент списка представляет собой массив numpy, представляющий текущее приближение решения на определенном шаге. Длина списка равна количеству шагов, пройденных при поиске ветки.\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:54:13.534Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4304bc1768cf4219bd1747c904a8c46b\",\"cell_num\":15,\"cell_source\":\"graph_nodes — это list, в котором хранятся вычисленные аппроксимации решения на каждом шаге метода стрельбы при поиске разных ветвей решений. Каждый элемент списка представляет собой массив numpy, представляющий текущее приближение решения на определенном шаге. Длина списка равна количеству шагов, пройденных при поиске ветки.\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:54:23.008Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"4304bc1768cf4219bd1747c904a8c46b\",\"cell_num\":15,\"cell_source\":\"graph_nodes — это list, в котором хранятся вычисленные аппроксимации решения на каждом шаге метода пристрелки при поиске разных ветвей решений. Каждый элемент списка представляет собой массив numpy, представляющий текущее приближение решения на определенном шаге. Длина списка равна количеству шагов, пройденных при поиске ветки.\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:55:05.988Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"6c0df308ee4f4308ad035e4255031c56\",\"cell_num\":11,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:55:06.805Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"37faa7f4333c43b181372e1182db3831\",\"cell_num\":12,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:55:06.806Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"37faa7f4333c43b181372e1182db3831\",\"cell_num\":12,\"cell_source\":\"\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:55:12.249Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"37faa7f4333c43b181372e1182db3831\",\"cell_num\":12,\"cell_source\":\"Точки бифуркцаии\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-11T17:55:17.946Z\",\"kernel_id\":\"4f9086bc-c335-4952-be83-2266d68b1ea9\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"rendered\",\"cell_index\":\"37faa7f4333c43b181372e1182db3831\",\"cell_num\":12,\"cell_source\":\"Точки бифуркциии:\",\"cell_type\":\"markdown\",\"session_id\":\"d0a2b777-eb31-4a2b-b6c0-91e8c8b71cb9\",\"cell_output\":null}"[EVENT_SEPARATOR]
