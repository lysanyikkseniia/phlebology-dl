"{\"ip_address\":null,\"time\":\"2023-05-18T16:46:06.885Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"from numpy  import*\\nimport matplotlib.pyplot as plt\\nimport matplotlib.font_manager as fm,os\\nimport matplotlib.patches as mpatches\\nimport matplotlib.lines as mlines\\nfrom scipy.integrate import odeint\\nfrom scipy import linalg\\nimport time\\nfrom numpy.linalg import det, inv, svd, norm\\nimport numpy as np\\",\n    \\"execution_count\\": 1,\n    \\"id\\": \\"dd6605d9469d4eb8831b73a9c1830ccc\\"\n  },\n  {\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"### The Runge-Kutta numerical integration method.\\",\n    \\"id\\": \\"382c8935c5aa402a8f96e9faea6c06c0\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\\n    \\\\"\\\\"\\\\"Approximates the solution to a system of first-order ordinary differential equations\\n    using the fourth-order Runge-Kutta method.\\n\\n    Args:\\n        to (float): Initial time.\\n        tEnd (float): Final time.\\n        yo (float): Initial condition for the dependent variable.\\n        tau (float): Step size.\\n        f (function): A function that calculates the derivative of the dependent variable\\n            with respect to time.\\n        p (dict): A dictionary containing any parameters required by the derivative function.\\n\\n    Returns:\\n        array: An array containing the estimated values of the dependent variable at each time step.\\n    \\\\"\\\\"\\\\"\\n\\n    def increment(f, t, y, tau, p):\\n        \\\\"\\\\"\\\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\\n\\n        Returns:\\n            float: The weighted average of the derivatives at each of the intermediate points.\\n        \\\\"\\\\"\\\\"\\n        k1 = tau*f(t,y, p)\\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\\n          \\n        \\n    y = [yo]\\n    while True:\\n        if tau > 0: tau = min(tau, tEnd - to)\\n        else: tau = max(tau, tEnd-to)\\n        to = to + tau\\n        if to == tEnd: break\\n        yo = yo + increment(f, to, yo, tau, p)\\n        y.append(yo)\\n    return array(y)\\",\n    \\"execution_count\\": 2,\n    \\"id\\": \\"8d93635877ae4ae48cb3473aff438587\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def calc_function(t, y, lambda_):\\n\\n    f = np.zeros(4)\\n\\n    p_ext = 1.17\\n    V0 = 87\\n\\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n\\n    # The first derivative for the first vessel\\n    f[0] = y[1]                                                 \\n\\n    # The second derivative for the second vessel\\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\\n\\n    # The first derivative for the second vessel\\n    f[2] = y[3]                                          \\n\\n    # The second derivative for the second vessel\\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\\n    return f\\",\n    \\"execution_count\\": 3,\n    \\"id\\": \\"592e84f18960464196db57feb726c6e0\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def initial_checker_for_calc(y_all,lambda_):\\n    left = y_all[0]\\n    right = y_all[-1]\\n    eps1 = 1\\n    eps2 = 0.5\\n    p_k = 0.1\\n    q = 0.1\\n    residuals = []\\n\\n    p_ext = 1.17\\n\\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\\n    \\n    s1 = 0.89\\n    \\n    s2 = 0.97\\n\\n  # Mass Conservation\\n    residuals.append(2650*right[1] - 3000*left[3])\\n    residuals.append(2650*left[1] - 3000*right[3])\\n\\n  # Bernoulli\\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\\n\\n    return np.array(residuals)\\",\n    \\"execution_count\\": 4,\n    \\"id\\": \\"f12052f6c9fd4fbc8ce5b6d7e280d36f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = []\\nFrech_dets = []\\neigenvals = []\\",\n    \\"execution_count\\": 5,\n    \\"id\\": \\"a36ecfc659ae4bef9ef61c531101364a\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def drop_parameter(arr, idx):             \\n    return np.delete(arr, idx)\\",\n    \\"execution_count\\": 6,\n    \\"id\\": \\"7cc58029aa84434181929d7e15993c51\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\\n              func,\\n              left,\\n              right,\\n              step,\\n              bc,\\n              eps=1e-4):\\n  steps = 0\\n  frech_ans = 1e9\\n  while(True):\\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        ys = y\\n        residuals = bc(y,approx[-1])\\n        #print(f"residuals {steps}", residuals)\\n        if (np.abs(residuals) < eps).all():\\n          #print("max", max(residuals))\\n          break\\n        steps += 1\\n        F = np.zeros((len(approx) - 1, len(approx)))\\n        #метод Ньютона\\n        for i in range(len(approx)):\\n            if i == stepping_param_idx: continue\\n            y_approx = approx.copy()\\n            y_approx[i] += eps\\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\\n            residuals_i = bc(y_i, approx[-1])\\n            \\n            F[:, i] = (residuals_i - residuals) / eps\\n\\n        F = np.delete(F, stepping_param_idx, axis=1)\\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\\n\\n        if np.linalg.det(F) == 0 or steps >= 100:    \\n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\\n            return False, steps, ys, approx, frech_ans\\n\\n        res = np.dot(np.linalg.inv(F), residuals)\\n        res = np.insert(res, stepping_param_idx, 0)\\n        approx = approx - res\\n\\n        # конец метода Ньютона\\n\\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\\n        \\n  if steps>0:\\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\\n  else:\\n    eigenvals.append(np.zeros(2))    \\n  return True, steps, ys, approx, frech_ans\\",\n    \\"execution_count\\": 7,\n    \\"id\\": \\"61062a775bbd48b5802d06381d92797f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_move(stepping_param_idx, approx, step):          \\n  previous_approximation = np.zeros(approx.shape)\\n  last_approximation = np.zeros(approx.shape)\\n  steps_streak=0\\n  max_steps_streak=0\\n  is_inf = False\\n  first_step=True \\n  \\n  while abs(step) > 1e-4:\\n\\n    print("step", step)\\n    print("shoot", approx[stepping_param_idx] + step)\\n\\n    approx_try = approx.copy()                                  \\n    approx_try[stepping_param_idx] += step\\n\\n    shoot = shooting(stepping_param_idx, approx = approx_try,\\n                     func = calc_function, left = 0, right = 1,\\n                     step = 0.01,\\n                     bc = initial_checker_for_calc)   \\n    print(shoot[0], shoot[1], shoot[3], "\\\\n")\\n\\n    if shoot[0]:    # not a critical point\\n      if step < 10:\\n        step *= 1.2\\n\\n      steps_streak += 1\\n      previous_approximation = last_approximation\\n      approx = shoot[3]\\n      graph_nodes.append(approx)\\n      Frech_dets.append(shoot[4])\\n      last_approximation = approx\\n\\n    else:\\n      step /= 2\\n      steps_streak = 0\\n\\n  if not is_inf:\\n    print("предельная точка", approx[stepping_param_idx])\\n\\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\\",\n    \\"execution_count\\": 8,\n    \\"id\\": \\"93da5fe1ad3d4036af754289dd638caf\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\\n  # diff - array of parameter differences at the last step\\n\\n    max_idx = 0\\n    max1 = 0\\n    for i in range(len(diff)):\\n        if i != stepping_param_idx and abs(diff[i]) > max1:\\n            max1 = abs(diff[i])\\n            max_idx = i\\n    print("diff", diff)\\n\\n    stepping_param_idx = max_idx\\n    \\n    print("new param", stepping_param_idx)\\n    if diff[max_idx] > 0: new_step = 0.01 \\n    else: new_step = -0.01\\n\\n    print("new_step", new_step)\\n    \\n    return stepping_param_idx, new_step\\",\n    \\"execution_count\\": 9,\n    \\"id\\": \\"97574e70c29d4fdf89eed69e82d98a3f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"def branches_search(stepping_param_idx, approx, step = 0.01):\\n    while 1 == 1:\\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\\n        if is_inf: break\\n        print("Parameter change")\\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\\n        print("approx", approx)\\",\n    \\"execution_count\\": 10,\n    \\"id\\": \\"b6285172fa2c4b3cbf725149ea967b8e\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"#def branches_search(stepping_param_idx, approx, step=0.01):\\n#    done = False\\n#    while not done:\\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\\n#        if not is_inf:\\n#            print("Parameter change")\\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\\n#            print("approx:", approx)\\n#        else:\\n#            done = True\\",\n    \\"execution_count\\": 11,\n    \\"id\\": \\"8c3deab98d4a46768497d9eedcdab16c\\"\n  },\n  {\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Точки бифуркциии:\\",\n    \\"id\\": \\"99e2dd4ce0a84d4c8e637f91a5bc7e5f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"approx = np.zeros(5)\\n\\nbranches_search(len(approx) - 1, approx, step=0.01)\\",\n    \\"execution_count\\": 12,\n    \\"id\\": \\"2b92198bc8174ae6ab79bafaf94331b6\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"graph_nodes = np.array(graph_nodes)\\",\n    \\"execution_count\\": 13,\n    \\"id\\": \\"d13d706e5a814f03a73af81c503e4d89\\"\n  },\n  {\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Plots\\",\n    \\"id\\": \\"dc59c9b8d004428888694a6ba2fb9ae5\\"\n  },\n  {\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"graph_nodes — это list, в котором хранятся вычисленные аппроксимации решения на каждом шаге метода пристрелки при поиске разных ветвей решений. Каждый элемент списка представляет собой массив numpy, представляющий текущее приближение решения на определенном шаге. Длина списка равна количеству шагов, пройденных при поиске ветки.\\",\n    \\"id\\": \\"56103124274148cba8be9132bbd819d8\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"fig, ax = plt.subplots()\\n\\nfor i in range(5):\\n    ax.plot(graph_nodes[:, i])\\n\\n\\nplt.grid(True)\\n\\n    \\nplt.show()\\",\n    \\"execution_count\\": 24,\n    \\"id\\": \\"362afe7a3b3241d385ecdba0c3cda716\\"\n  },\n  {\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"Each point on the blue line represents an approximation obtained during the iteration process in the parameter_move function, where the x-coordinate is the value of the u parameter and the y-coordinate is the corresponding value of the lambda parameter.\\n\\nThe approximations converge to a fixed point, so the blue line will show a clear pattern of convergence towards that point. \\",\n    \\"id\\": \\"f3239a31e99a4852a4c69c0dfb7577f9\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"last_approx = graph_nodes[-1]\\n\\nplt.figure(figsize=(10, 8))\\n\\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\\n\\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\\n\\nplt.xlabel("u", fontsize=14)\\nplt.ylabel("lambda", fontsize=14)\\n\\nplt.grid(True)\\n\\nplt.show()\\",\n    \\"execution_count\\": 15,\n    \\"id\\": \\"9c6ca0aa7f0c4c1b914c470cb887067f\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"len(Frech_dets)\\",\n    \\"execution_count\\": 16,\n    \\"id\\": \\"97f76b2d6df8446180fe5b9385cd8ab5\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"len(graph_nodes)\\",\n    \\"execution_count\\": 17,\n    \\"id\\": \\"1ce156bf6ae94d1b8b2627693174766b\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"Frech_dets = np.array(Frech_dets)\\",\n    \\"execution_count\\": 18,\n    \\"id\\": \\"413e91eb94204cea8c04e67ca918ee17\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\\n\\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\\n\\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\\n\\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\\n\\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\\n\\nplt.show()\\",\n    \\"execution_count\\": 19,\n    \\"id\\": \\"e1dc45785de44f119efb111563550a98\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"eigenvals = np.array(eigenvals)\\",\n    \\"execution_count\\": 20,\n    \\"id\\": \\"4a9832b88bc549bd83801ccf8de8541b\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"len(graph_nodes[:,0])\\",\n    \\"execution_count\\": 21,\n    \\"id\\": \\"244b4ba02bf64e218ee7b1baa482a61b\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"len(eigenvals)\\",\n    \\"execution_count\\": 22,\n    \\"id\\": \\"f1f8ed14d8ac407d975cee06758c6550\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"ddcf7042547b4c8196d67aac75a42656\\"\n  },\n  {\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null,\n    \\"id\\": \\"652421def5044a7f819bcc930b2db9da\\"\n  }\n]\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:32.083Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":14,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.001)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T16:47:32.083Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":14,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "np" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:32.631Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T16:47:32.631Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "np" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:36.817Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:37.398Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:37.481Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:37.569Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:37.650Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:37.732Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:37.815Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:38.490Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:39.003Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:39.413Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:39.606Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":11,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:39.766Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":11,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:39.903Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":11,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:39.921Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":12,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.080Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":12,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.228Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":12,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.368Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":13,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.524Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":13,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.681Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":13,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.831Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":13,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:47:40.977Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":13,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:04.248Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.001)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":975},{\\"output_type\\":\\"stream\\",\\"size\\":1971},{\\"output_type\\":\\"stream\\",\\"size\\":8759},{\\"output_type\\":\\"stream\\",\\"size\\":1145},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T16:57:04.248Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:05.575Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:05.596Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:07.022Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":4791}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T16:57:07.022Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"IndexError\\",\\"evalue\\":\\"too many indices for array: array is 1-dimensional, but 2 were indexed\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:13.990Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"cbf1db7ac7b740c78bbe9383e34ae7eb\",\"cell_num\":16,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:17.542Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cbf1db7ac7b740c78bbe9383e34ae7eb\",\"cell_num\":17,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:17.574Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"cbf1db7ac7b740c78bbe9383e34ae7eb\",\"cell_num\":18,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":41}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:22.609Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:22.631Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:23.543Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"cbf1db7ac7b740c78bbe9383e34ae7eb\",\"cell_num\":17,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:23.571Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"cbf1db7ac7b740c78bbe9383e34ae7eb\",\"cell_num\":18,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":41}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:43.064Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":17,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.005)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":277},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T16:57:43.064Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":17,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "append"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:43.079Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":17,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:45.567Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"cbf1db7ac7b740c78bbe9383e34ae7eb\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.309Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.349Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":1,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.542Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.645Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.677Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":4,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.812Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":4,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:49.840Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.013Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.118Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.235Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":7,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.381Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.528Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.577Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:50.943Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:51.101Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":9,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:51.252Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:51.339Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:51.675Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:51.785Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:51.955Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:52.207Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":11,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:57:52.229Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":12,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:59:58.157Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.005)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2258},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T16:59:58.157Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:59:59.597Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T16:59:59.617Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":848}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:01.909Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":17,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:02.123Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":24299}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:13.141Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:13.165Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":1,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:13.988Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.022Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":3,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.102Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.266Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.303Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":5,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.377Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.450Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":6,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.614Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.736Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:14.986Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:15.020Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":8,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:15.314Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:15.608Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:15.745Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:16.217Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:16.241Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:16.767Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:16.792Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:17.487Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":11,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:00:17.503Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":12,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:07:52.562Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":14,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.0025)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":8585},{\\"output_type\\":\\"stream\\",\\"size\\":8584},{\\"output_type\\":\\"stream\\",\\"size\\":1600},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T17:07:52.562Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":14,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:07:55.293Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:07:55.329Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":10728}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:00.329Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":17,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:00.519Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":12187}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:07.767Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":19,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:07.980Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":20,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":21259}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:08.338Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":20,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:08.363Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":21,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:09.126Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":21,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:09.153Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":22,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:09.600Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":22,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:09.631Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":23,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:10.084Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":23,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:10.609Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":24,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. French Dets")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. French Dets")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. French Dets")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":40383}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.006Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":24,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.038Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":25,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.236Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":25,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.327Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":26,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.461Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":26,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.628Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":27,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:13.817Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":27,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:14.071Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":28,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":9255}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:41.898Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":23,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:08:42.471Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":24,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":41715}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:10:15.595Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:10:41.991Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:10:42.535Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":44555}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:07.073Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  # Add red dotted line at y=0\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:07.622Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  # Add red dotted line at y=0\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--")  # Add red dotted line at y=0\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":43547}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:29.637Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.5) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.5) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:30.163Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.5) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.5) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":43015}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:35.405Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.5) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:35.932Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.5)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.5) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":43423}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:42.800Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:11:43.335Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":44083}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:13:57.674Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:13:58.309Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":45519}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:14:13.709Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:14:14.248Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":49179}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:19:46.561Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"938acd91c50e4f04bdd34d39b0fd2be9\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:20:02.212Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"938acd91c50e4f04bdd34d39b0fd2be9\",\"cell_num\":null,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:54.709Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:54.746Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":1,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.113Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.145Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":3,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.247Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.418Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":4,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.486Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.699Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":5,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.779Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:55.972Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":6,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:56.009Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:56.250Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:56.412Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:56.551Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:56.882Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:56.913Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:57.264Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:57.290Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:57.796Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:57.821Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:58.323Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":11,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:34:58.338Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":12,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:35.057Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.0025)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":8585},{\\"output_type\\":\\"stream\\",\\"size\\":8584},{\\"output_type\\":\\"stream\\",\\"size\\":8561},{\\"output_type\\":\\"stream\\",\\"size\\":8589},{\\"output_type\\":\\"stream\\",\\"size\\":8597},{\\"output_type\\":\\"stream\\",\\"size\\":8531},{\\"output_type\\":\\"stream\\",\\"size\\":8532},{\\"output_type\\":\\"stream\\",\\"size\\":8518},{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T17:46:35.057Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:35.061Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:38.807Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:38.827Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":653}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:42.159Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":17,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:42.322Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":13951}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:43.315Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":19,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:43.475Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":20,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":22759}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:48.610Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":20,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:48.631Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":21,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:48.966Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":21,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:48.992Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":22,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:49.331Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":22,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:49.359Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":23,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:49.679Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":23,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:50.081Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":24,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":41819}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:50.173Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:50.717Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":49111}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:52.890Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":25,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:52.918Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":26,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:53.127Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":26,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:53.205Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":27,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:53.525Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":27,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:53.551Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":28,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":20}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:53.821Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":28,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:46:53.962Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":29,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":8059}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:47:13.624Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"e1dc45785de44f119efb111563550a98\",\"cell_num\":null,\"cell_source\":\"fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])])\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])])\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])])\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])])\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:52.297Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":14,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx, step=0.0025)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":29},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T17:48:52.297Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":14,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""numpy.ndarray" object has no attribute "append"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:59.322Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:59.340Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":1,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:59.651Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:59.789Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":3,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:59.873Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:48:59.997Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.068Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":5,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.185Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.216Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":6,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.385Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.498Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.669Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.784Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":8,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:00.956Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:01.067Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":9,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:01.239Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:01.355Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":10,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:01.638Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:01.691Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:02.058Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:02.374Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":11,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:49:02.390Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":12,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:54:55.346Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":8673},{\\"output_type\\":\\"stream\\",\\"size\\":5335},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T17:54:55.346Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:54:56.782Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:54:56.839Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":3552}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:54:58.784Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":17,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:54:58.939Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":19467}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:03.214Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":19,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:03.366Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":20,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":19951}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:13.116Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":20,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:13.140Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":21,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:13.539Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":21,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:13.562Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":22,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:13.930Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":22,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:13.959Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":23,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:14.401Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":23,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:14.835Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":71095}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:15.402Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":24,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:15.422Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":25,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:15.814Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":25,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:15.835Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":26,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:16.200Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":26,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:16.221Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":27,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:16.658Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":27,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:16.804Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":28,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":19191}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:21.036Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"652421def5044a7f819bcc930b2db9da\",\"cell_num\":null,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:37.979Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":0,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:37.996Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"dd6605d9469d4eb8831b73a9c1830ccc\",\"cell_num\":1,\"cell_source\":\"from numpy  import*\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm,os\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nfrom scipy.integrate import odeint\nfrom scipy import linalg\nimport time\nfrom numpy.linalg import det, inv, svd, norm\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:38.401Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":2,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:38.431Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8d93635877ae4ae48cb3473aff438587\",\"cell_num\":3,\"cell_source\":\"def Runge_Kutta(to, tEnd, yo, tau, f, p):\n    \\"\\"\\"Approximates the solution to a system of first-order ordinary differential equations\n    using the fourth-order Runge-Kutta method.\n\n    Args:\n        to (float): Initial time.\n        tEnd (float): Final time.\n        yo (float): Initial condition for the dependent variable.\n        tau (float): Step size.\n        f (function): A function that calculates the derivative of the dependent variable\n            with respect to time.\n        p (dict): A dictionary containing any parameters required by the derivative function.\n\n    Returns:\n        array: An array containing the estimated values of the dependent variable at each time step.\n    \\"\\"\\"\n\n    def increment(f, t, y, tau, p):\n        \\"\\"\\"Computes the weighted average of the derivatives at each of the intermediate points for a given time step.\n\n        Returns:\n            float: The weighted average of the derivatives at each of the intermediate points.\n        \\"\\"\\"\n        k1 = tau*f(t,y, p)\n        k2 = tau*f(t+(1/4)*tau,y+(1/4)*k1, p)\n        k3 = tau *f(t+(3/8)*tau,y+(3/32)*k1+(9/32)*k2, p)\n        k4 = tau*f(t+(12/13)*tau,y+(1932/2197)*k1-(7200/2197)*k2+(7296/2197)*k3, p)\n        k5 = tau*f(t+tau,y+(439/216)*k1-8*k2+(3680/513)*k3 -(845/4104)*k4, p)\n        k6 = tau*f(t+(1/2)*tau,y-(8/27)*k1+2*k2-(3544/2565)*k3 +(1859/4104)*k4-(11/40)*k5, p)\n        return (16/135)*k1+(6656/12825)*k3+(28561/56430)*k4-(9/50)*k5+(2/55)*k6\n          \n        \n    y = [yo]\n    while True:\n        if tau > 0: tau = min(tau, tEnd - to)\n        else: tau = max(tau, tEnd-to)\n        to = to + tau\n        if to == tEnd: break\n        yo = yo + increment(f, to, yo, tau, p)\n        y.append(yo)\n    return array(y)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:38.602Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":3,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:38.709Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"592e84f18960464196db57feb726c6e0\",\"cell_num\":4,\"cell_source\":\"def calc_function(t, y, lambda_):\n\n    f = np.zeros(4)\n\n    p_ext = 1.17\n    V0 = 87\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n\n    # The first derivative for the first vessel\n    f[0] = y[1]                                                 \n\n    # The second derivative for the second vessel\n    f[1] = round(-r1*T/I*y[1] - T**2/(c1*I)*y[0] + T**2*p_ext/(I*V0),100)\n\n    # The first derivative for the second vessel\n    f[2] = y[3]                                          \n\n    # The second derivative for the second vessel\n    f[3] = round(-r2*T/I*y[3] - T**2/(c2*I)*y[2] + T**2*p_ext/(I*V0),100)\n    return f\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:38.780Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":4,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:38.995Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f12052f6c9fd4fbc8ce5b6d7e280d36f\",\"cell_num\":5,\"cell_source\":\"def initial_checker_for_calc(y_all,lambda_):\n    left = y_all[0]\n    right = y_all[-1]\n    eps1 = 1\n    eps2 = 0.5\n    p_k = 0.1\n    q = 0.1\n    residuals = []\n\n    p_ext = 1.17\n\n    T, c1, c2, I, r1, r2 = [1, lambda_, 1.1, 1.13, 0.61, 0.93]\n    \n    s1 = 0.89\n    \n    s2 = 0.97\n\n  # Mass Conservation\n    residuals.append(2650*right[1] - 3000*left[3])\n    residuals.append(2650*left[1] - 3000*right[3])\n\n  # Bernoulli\n    residuals.append((2650*right[1] / sqrt(2)/T/s1)**2 + right[0]/c1 - (3000*left[3]/sqrt(2)/T/s2)**2 - left[2]/c2)\n    residuals.append((2650*left[1] / sqrt(2)/T/s1)**2 + left[0]/c1 - (3000*right[3]/sqrt(2)/T/s2)**2 - right[2]/c2 - p_ext)\n\n    return np.array(residuals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:39.010Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":5,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:39.262Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":6,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:39.298Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a36ecfc659ae4bef9ef61c531101364a\",\"cell_num\":7,\"cell_source\":\"graph_nodes = []\nFrech_dets = []\neigenvals = []\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:39.427Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7cc58029aa84434181929d7e15993c51\",\"cell_num\":7,\"cell_source\":\"def drop_parameter(arr, idx):             \n    return np.delete(arr, idx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:39.659Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":7,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:39.856Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"61062a775bbd48b5802d06381d92797f\",\"cell_num\":8,\"cell_source\":\"def shooting(stepping_param_idx, approx,                                                                     #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p не отдельной переменной, а последним элементом approx\n              func,\n              left,\n              right,\n              step,\n              bc,\n              eps=1e-4):\n  steps = 0\n  frech_ans = 1e9\n  while(True):\n        y = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                             Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        ys = y\n        residuals = bc(y,approx[-1])\n        #print(f"residuals {steps}", residuals)\n        if (np.abs(residuals) < eps).all():\n          #print("max", max(residuals))\n          break\n        steps += 1\n        F = np.zeros((len(approx) - 1, len(approx)))\n        #метод Ньютона\n        for i in range(len(approx)):\n            if i == stepping_param_idx: continue\n            y_approx = approx.copy()\n            y_approx[i] += eps\n            y_i = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(y_approx, len(y_approx) - 1), -step, func, y_approx[-1])[::-1],\n                                  Runge_Kutta((right + left) / 2, right, drop_parameter(y_approx, len(y_approx) - 1), step, func, y_approx[-1])[1:]))\n            residuals_i = bc(y_i, approx[-1])\n            \n            F[:, i] = (residuals_i - residuals) / eps\n\n        F = np.delete(F, stepping_param_idx, axis=1)\n        frech_ans = np.linalg.det(F) # determinant of Fréchet matrix\n\n        if np.linalg.det(F) == 0 or steps >= 100:    \n            print("Convergence. Zero determinant of Fréchet matrix or maximum number of steps.")\n            return False, steps, ys, approx, frech_ans\n\n        res = np.dot(np.linalg.inv(F), residuals)\n        res = np.insert(res, stepping_param_idx, 0)\n        approx = approx - res\n\n        # конец метода Ньютона\n\n        ys = np.concatenate((Runge_Kutta((right + left) / 2, left, drop_parameter(approx, len(approx) - 1), -step, func, approx[-1])[::-1],\n                      Runge_Kutta((right + left) / 2, right, drop_parameter(approx, len(approx) - 1), step, func, approx[-1])[1:]))\n        \n  if steps>0:\n    eigenvals.append(np.linalg.eig(F)[0][-2:])\n  else:\n    eigenvals.append(np.zeros(2))    \n  return True, steps, ys, approx, frech_ans\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:40.117Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":8,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:40.149Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"93da5fe1ad3d4036af754289dd638caf\",\"cell_num\":9,\"cell_source\":\"def parameter_move(stepping_param_idx, approx, step):          \n  previous_approximation = np.zeros(approx.shape)\n  last_approximation = np.zeros(approx.shape)\n  steps_streak=0\n  max_steps_streak=0\n  is_inf = False\n  first_step=True \n  \n  while abs(step) > 1e-4:\n\n    print("step", step)\n    print("shoot", approx[stepping_param_idx] + step)\n\n    approx_try = approx.copy()                                  \n    approx_try[stepping_param_idx] += step\n\n    shoot = shooting(stepping_param_idx, approx = approx_try,\n                     func = calc_function, left = 0, right = 1,\n                     step = 0.01,\n                     bc = initial_checker_for_calc)   \n    print(shoot[0], shoot[1], shoot[3], "\\n")\n\n    if shoot[0]:    # not a critical point\n      if step < 10:\n        step *= 1.2\n\n      steps_streak += 1\n      previous_approximation = last_approximation\n      approx = shoot[3]\n      graph_nodes.append(approx)\n      Frech_dets.append(shoot[4])\n      last_approximation = approx\n\n    else:\n      step /= 2\n      steps_streak = 0\n\n  if not is_inf:\n    print("предельная точка", approx[stepping_param_idx])\n\n  return stepping_param_idx , np.array(last_approximation - previous_approximation), is_inf, approx\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:40.668Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":9,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:40.692Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97574e70c29d4fdf89eed69e82d98a3f\",\"cell_num\":10,\"cell_source\":\"def parameter_change(stepping_param_idx, diff, approx):                                                            #!!!!!!!!!!!!!   ОТРЕДАЧИТЬ ЭТУ ЯЧЕЙКУ !!!!!!!!!!!!!!!!  сделать p по индексу а не по значению\n  # diff - array of parameter differences at the last step\n\n    max_idx = 0\n    max1 = 0\n    for i in range(len(diff)):\n        if i != stepping_param_idx and abs(diff[i]) > max1:\n            max1 = abs(diff[i])\n            max_idx = i\n    print("diff", diff)\n\n    stepping_param_idx = max_idx\n    \n    print("new param", stepping_param_idx)\n    if diff[max_idx] > 0: new_step = 0.01 \n    else: new_step = -0.01\n\n    print("new_step", new_step)\n    \n    return stepping_param_idx, new_step\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:41.201Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":10,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:41.221Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"b6285172fa2c4b3cbf725149ea967b8e\",\"cell_num\":11,\"cell_source\":\"def branches_search(stepping_param_idx, approx, step = 0.01):\n    while 1 == 1:\n        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n        if is_inf: break\n        print("Parameter change")\n        stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n        print("approx", approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:41.796Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":11,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T17:55:41.810Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8c3deab98d4a46768497d9eedcdab16c\",\"cell_num\":12,\"cell_source\":\"#def branches_search(stepping_param_idx, approx, step=0.01):\n#    done = False\n#    while not done:\n#        stepping_param_idx, diff, is_inf, approx = parameter_move(stepping_param_idx, approx, step)\n#        if not is_inf:\n#            print("Parameter change")\n#            stepping_param_idx, step = parameter_change(stepping_param_idx, diff, approx)\n#            print("approx:", approx)\n#        else:\n#            done = True\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:44.818Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"approx = np.zeros(5)\n\nbranches_search(len(approx) - 1, approx)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":8673},{\\"output_type\\":\\"stream\\",\\"size\\":8575},{\\"output_type\\":\\"stream\\",\\"size\\":8558},{\\"output_type\\":\\"stream\\",\\"size\\":8567},{\\"output_type\\":\\"stream\\",\\"size\\":8553},{\\"output_type\\":\\"stream\\",\\"size\\":8542},{\\"output_type\\":\\"stream\\",\\"size\\":8498},{\\"output_type\\":\\"stream\\",\\"size\\":8612},{\\"output_type\\":\\"stream\\",\\"size\\":8609},{\\"output_type\\":\\"stream\\",\\"size\\":8601},{\\"output_type\\":\\"stream\\",\\"size\\":8581},{\\"output_type\\":\\"stream\\",\\"size\\":8581},{\\"output_type\\":\\"stream\\",\\"size\\":8583},{\\"output_type\\":\\"stream\\",\\"size\\":8581},{\\"output_type\\":\\"stream\\",\\"size\\":8724},{\\"output_type\\":\\"stream\\",\\"size\\":8725},{\\"output_type\\":\\"stream\\",\\"size\\":8573},{\\"output_type\\":\\"stream\\",\\"size\\":8572},{\\"output_type\\":\\"stream\\",\\"size\\":8571},{\\"output_type\\":\\"stream\\",\\"size\\":8611},{\\"output_type\\":\\"stream\\",\\"size\\":8775},{\\"output_type\\":\\"stream\\",\\"size\\":8632},{\\"output_type\\":\\"stream\\",\\"size\\":8630},{\\"output_type\\":\\"stream\\",\\"size\\":8629},{\\"output_type\\":\\"stream\\",\\"size\\":8623},{\\"output_type\\":\\"stream\\",\\"size\\":8631},{\\"output_type\\":\\"stream\\",\\"size\\":8631},{\\"output_type\\":\\"stream\\",\\"size\\":8919},{\\"output_type\\":\\"stream\\",\\"size\\":8627},{\\"output_type\\":\\"stream\\",\\"size\\":8910},{\\"output_type\\":\\"stream\\",\\"size\\":8619},{\\"output_type\\":\\"stream\\",\\"size\\":8905},{\\"output_type\\":\\"stream\\",\\"size\\":8618},{\\"output_type\\":\\"stream\\",\\"size\\":8617},{\\"output_type\\":\\"stream\\",\\"size\\":8762},{\\"output_type\\":\\"stream\\",\\"size\\":8763},{\\"output_type\\":\\"stream\\",\\"size\\":8903},{\\"output_type\\":\\"stream\\",\\"size\\":8620},{\\"output_type\\":\\"stream\\",\\"size\\":8904},{\\"output_type\\":\\"stream\\",\\"size\\":8619},{\\"output_type\\":\\"stream\\",\\"size\\":8616},{\\"output_type\\":\\"stream\\",\\"size\\":8905},{\\"output_type\\":\\"stream\\",\\"size\\":8907},{\\"output_type\\":\\"stream\\",\\"size\\":8760},{\\"output_type\\":\\"stream\\",\\"size\\":8619},{\\"output_type\\":\\"stream\\",\\"size\\":8617},{\\"output_type\\":\\"stream\\",\\"size\\":8906},{\\"output_type\\":\\"stream\\",\\"size\\":8904},{\\"output_type\\":\\"stream\\",\\"size\\":8619},{\\"output_type\\":\\"stream\\",\\"size\\":8617},{\\"output_type\\":\\"stream\\",\\"size\\":8763},{\\"output_type\\":\\"stream\\",\\"size\\":8617},{\\"output_type\\":\\"stream\\",\\"size\\":8903},{\\"output_type\\":\\"stream\\",\\"size\\":8620},{\\"output_type\\":\\"stream\\",\\"size\\":8618},{\\"output_type\\":\\"stream\\",\\"size\\":8616},{\\"output_type\\":\\"stream\\",\\"size\\":8596},{\\"output_type\\":\\"stream\\",\\"size\\":8880},{\\"output_type\\":\\"stream\\",\\"size\\":8877},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8879},{\\"output_type\\":\\"stream\\",\\"size\\":8882},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8592},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8595},{\\"output_type\\":\\"stream\\",\\"size\\":8738},{\\"output_type\\":\\"stream\\",\\"size\\":8592},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8879},{\\"output_type\\":\\"stream\\",\\"size\\":8595},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8736},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8739},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8591},{\\"output_type\\":\\"stream\\",\\"size\\":8591},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8881},{\\"output_type\\":\\"stream\\",\\"size\\":8882},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8736},{\\"output_type\\":\\"stream\\",\\"size\\":8737},{\\"output_type\\":\\"stream\\",\\"size\\":8880},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8593},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":8594},{\\"output_type\\":\\"stream\\",\\"size\\":2009},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T18:22:44.818Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"2b92198bc8174ae6ab79bafaf94331b6\",\"cell_num\":13,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"KeyboardInterrupt\\",\\"evalue\\":\\"\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:44.827Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":13,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:46.255Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":14,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:46.280Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"d13d706e5a814f03a73af81c503e4d89\",\"cell_num\":15,\"cell_source\":\"graph_nodes = np.array(graph_nodes)\ngraph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":653}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:47.569Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":17,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:47.740Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"362afe7a3b3241d385ecdba0c3cda716\",\"cell_num\":18,\"cell_source\":\"fig, ax = plt.subplots()\n\nfor i in range(5):\n    ax.plot(graph_nodes[:, i])\n\n\nplt.grid(True)\n\n    \nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":15071}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:49.355Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":19,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:49.533Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9c6ca0aa7f0c4c1b914c470cb887067f\",\"cell_num\":20,\"cell_source\":\"last_approx = graph_nodes[-1]\n\nplt.figure(figsize=(10, 8))\n\nplt.plot(graph_nodes[:, 0], graph_nodes[:, -1], color="blue", linewidth=2)\n\nplt.plot([graph_nodes[0, 0], graph_nodes[-1, 0]], [last_approx[-1], last_approx[-1]], "--", color="black", linewidth=1)\n\nplt.xlabel("u", fontsize=14)\nplt.ylabel("lambda", fontsize=14)\n\nplt.grid(True)\n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":23055}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:50.122Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":20,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:50.151Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"97f76b2d6df8446180fe5b9385cd8ab5\",\"cell_num\":21,\"cell_source\":\"len(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":21}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:50.490Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":21,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:50.523Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"1ce156bf6ae94d1b8b2627693174766b\",\"cell_num\":22,\"cell_source\":\"len(graph_nodes)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":21}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:51.082Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":22,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:51.117Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"413e91eb94204cea8c04e67ca918ee17\",\"cell_num\":23,\"cell_source\":\"Frech_dets = np.array(Frech_dets)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:51.466Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":23,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:51.949Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7af0ef1e01824d1ab67548a1437890da\",\"cell_num\":24,\"cell_source\":\"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))\n\naxs[0, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 1])][:, 1], Frech_dets[np.argsort(graph_nodes[:, 1])], marker=\\"*\\")\naxs[0, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\naxs[0, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 0])][:, 0], Frech_dets[np.argsort(graph_nodes[:, 0])], marker=\\"*\\")\naxs[0, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[0, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 0].plot(graph_nodes[np.argsort(graph_nodes[:, 2])][:, 2], Frech_dets[np.argsort(graph_nodes[:, 2])], marker=\\"*\\")\naxs[1, 0].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 0].axhline(0, color="r", linestyle="--", linewidth=0.75)  \n\naxs[1, 1].plot(graph_nodes[np.argsort(graph_nodes[:, 3])][:, 3], Frech_dets[np.argsort(graph_nodes[:, 3])], marker=\\"*\\")\naxs[1, 1].set_title("Graph Nodes vs. Fréchet Determinant")\naxs[1, 1].axhline(0, color="r", linestyle="--", linewidth=0.75) \n\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"display_data\\",\\"size\\":61415}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:55.405Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":24,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:55.436Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4a9832b88bc549bd83801ccf8de8541b\",\"cell_num\":25,\"cell_source\":\"eigenvals = np.array(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:56.265Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":25,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:56.288Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"244b4ba02bf64e218ee7b1baa482a61b\",\"cell_num\":26,\"cell_source\":\"len(graph_nodes[:,0])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":21}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:56.663Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":26,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:56.692Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"f1f8ed14d8ac407d975cee06758c6550\",\"cell_num\":27,\"cell_source\":\"len(eigenvals)\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":21}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:56.956Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":27,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:56.963Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"0d7eb3ab3fa947d8814ef6620125542e\",\"cell_num\":27,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:57.160Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"ddcf7042547b4c8196d67aac75a42656\",\"cell_num\":28,\"cell_source\":\"plt.plot(graph_nodes[:,0], eigenvals[:,0])\nplt.plot(graph_nodes[:,0], eigenvals[:,1])\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":436},{\\"output_type\\":\\"execute_result\\",\\"size\\":62},{\\"output_type\\":\\"display_data\\",\\"size\\":8283}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:22:57.324Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"c89b9d12344a443a8505810222356220\",\"cell_num\":28,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:25:21.503Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"5320dd4350334ff18152cc1ff4bd5368\",\"cell_num\":23,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:25:24.451Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5320dd4350334ff18152cc1ff4bd5368\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate random 6D array for demonstration\ngraph_nodes = np.random.random((10, 10, 10, 10, 10, 10))\n\n# Choose fixed values for four dimensions (you can modify this based on your array"s dimensions)\nfixed_dims = [0, 1, 2, 3]\n\n# Create a subplot for each combination of the remaining two dimensions\nfig, axs = plt.subplots(len(fixed_dims), len(fixed_dims))\n\n# Iterate over the fixed dimensions and create plots\nfor i, dim1 in enumerate(fixed_dims):\n    for j, dim2 in enumerate(fixed_dims):\n        # Extract the 2D slice from the 6D array\n        slice_2d = graph_nodes[:, :, :, :, dim1, dim2]\n        \n        # Plot the 2D slice\n        axs[i, j].imshow(slice_2d)\n        axs[i, j].set_title(f"Dimensions {dim1} vs {dim2}")\n\n# Add a colorbar for reference\nfig.colorbar(axs[0, 0].imshow(slice_2d))\n\n# Adjust spacing between subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":11112}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T18:25:24.451Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"5320dd4350334ff18152cc1ff4bd5368\",\"cell_num\":25,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"Invalid shape (10, 10, 10, 10) for image data\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:25:36.772Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"5320dd4350334ff18152cc1ff4bd5368\",\"cell_num\":25,\"cell_source\":\"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Choose fixed values for four dimensions (you can modify this based on your array"s dimensions)\nfixed_dims = [0, 1, 2, 3]\n\n# Create a subplot for each combination of the remaining two dimensions\nfig, axs = plt.subplots(len(fixed_dims), len(fixed_dims))\n\n# Iterate over the fixed dimensions and create plots\nfor i, dim1 in enumerate(fixed_dims):\n    for j, dim2 in enumerate(fixed_dims):\n        # Extract the 2D slice from the 6D array\n        slice_2d = graph_nodes[:, :, :, :, dim1, dim2]\n        \n        # Plot the 2D slice\n        axs[i, j].imshow(slice_2d)\n        axs[i, j].set_title(f"Dimensions {dim1} vs {dim2}")\n\n# Add a colorbar for reference\nfig.colorbar(axs[0, 0].imshow(slice_2d))\n\n# Adjust spacing between subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0},{\\"output_type\\":\\"display_data\\",\\"size\\":11112}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T18:25:36.772Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"5320dd4350334ff18152cc1ff4bd5368\",\"cell_num\":25,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"Invalid shape (10, 10, 10, 10) for image data\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:26:56.710Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"de392123ca1b4d099966a6d4780571ac\",\"cell_num\":19,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:26:58.481Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"de392123ca1b4d099966a6d4780571ac\",\"cell_num\":21,\"cell_source\":\"num_rows, num_columns = graph_nodes.shape\n\n# Generate a color map for the scatter plots\ncolors = np.arange(num_rows)\n\n# Plot each combination of columns against each other\nfor i in range(num_columns):\n    for j in range(i + 1, num_columns):\n        plt.scatter(graph_nodes[:, i], graph_nodes[:, j], c=colors, cmap="viridis")\n        plt.xlabel(f"Column {i+1}")\n        plt.ylabel(f"Column {j+1}")\n        plt.title(f"Scatter plot: Column {i+1} vs Column {j+1}")\n        plt.colorbar(label="Data Point")\n        plt.show()\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-18T18:26:58.481Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"error\",\"cell_index\":\"de392123ca1b4d099966a6d4780571ac\",\"cell_num\":21,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"too many values to unpack (expected 2)\\"}\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:27:07.048Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"create\",\"cell_index\":\"3ed309d93df6433c86f98381c6529fc0\",\"cell_num\":19,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:27:08.077Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"3ed309d93df6433c86f98381c6529fc0\",\"cell_num\":20,\"cell_source\":\"graph_nodes.shape\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:27:08.110Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"3ed309d93df6433c86f98381c6529fc0\",\"cell_num\":21,\"cell_source\":\"graph_nodes.shape\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":41}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:27:16.091Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"execute\",\"cell_index\":\"3ed309d93df6433c86f98381c6529fc0\",\"cell_num\":20,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:27:16.956Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"3ed309d93df6433c86f98381c6529fc0\",\"cell_num\":21,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1026743}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-18T18:27:28.386Z\",\"kernel_id\":\"71d9f467-94ca-428f-8868-9cffe189247c\",\"notebook_name\":\"Bifurcation_analysis.ipynb\",\"event\":\"delete\",\"cell_index\":\"3ed309d93df6433c86f98381c6529fc0\",\"cell_num\":null,\"cell_source\":\"graph_nodes\",\"cell_type\":\"code\",\"session_id\":\"c083829f-9326-40de-aa9b-5e7cd4d8cb89\",\"cell_output\":null}"[EVENT_SEPARATOR]
